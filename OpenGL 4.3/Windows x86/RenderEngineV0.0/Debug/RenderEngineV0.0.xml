<?xml version="1.0"?>
<doc>
    <assembly>
        "RenderEngineV0.0"
    </assembly>
    <members>
        <member name="M:mouseMotionFunc(System.Int32,System.Int32)">
            <summary>
OS event function for mouse action (mouse displacement).
<param name="x">X position of the mouse cursor.</param><param name="y">Y position of the mouse cursor.</param></summary>
        </member>
        <member name="M:mouseFunc(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
OS event function for mouse action (when a button is pressed).
<param name="button">Identifier of the pressed button.</param><param name="state">Indicates if the button was pressed or if the button was released.</param><param name="x">X position of the mouse cursor when button was pressed.</param><param name="y">Y position of the mouse cursor when button was pressed.</param></summary>
        </member>
        <member name="M:keyboardFunc(System.Byte,System.Int32,System.Int32)">
            <summary>
OS event function for keyboard actions.
<param name="key">Character of the pressed key.</param><param name="x">X position of the mouse cursor when button was pressed.</param><param name="y">Y position of the mouse cursor when button was pressed.</param></summary>
        </member>
        <member name="M:resizeFunc(System.Int32,System.Int32)">
            <summary>
OS event function for window resizing.
<param name="width">Size width after resizing.</param><param name="height">Size height after resizing.</param></summary>
        </member>
        <member name="M:idleFunc">
            <summary>
OS event function for idle time.
</summary>
        </member>
        <member name="M:renderFunc">
            <summary>
Rendering function.
</summary>
        </member>
        <member name="M:SceneEngine.initRender">
            <summary>
Initialize the default scene and the OpenGL MainLoop.
</summary>
            <summary>
Initialize the default scene and the OpenGL MainLoop.
</summary>
        </member>
        <member name="M:SceneEngine.initSceneEngine(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**)">
            <summary>
Initialize local variables and OpenGL.
<param name="argc">Number of our main parameters.</param><param name="argv">Parameters strings.</param></summary>
            <summary>
Initialize local variables and OpenGL.
<param name="argc">Number of our main parameters.</param><param name="argv">Parameters strings.</param></summary>
        </member>
        <member name="M:SceneEngine.Dispose">
            <summary>
Destructor of <c>SceneEngine</c> class.
</summary>
            <summary>
Destructor of <c>SceneEngine</c> class.
</summary>
        </member>
        <member name="M:SceneEngine.#ctor">
            <summary>
Constructor of <c>SceneEngine</c> class.
</summary>
            <summary>
Constructor of <c>SceneEngine</c> class.
</summary>
        </member>
        <member name="M:SceneEngine.initPipelineConfiguration">
            <summary>
This method configure graphics pipeline and rendering with several values.
</summary>
            <summary>
This method configure graphics pipeline and rendering with several values.
</summary>
        </member>
        <member name="M:SceneEngine.initOSEvents">
            <summary>
This method asociate OS event functions to OpenGL window.
</summary>
            <summary>
This method asociate OS event functions to OpenGL window.
</summary>
        </member>
        <member name="M:SceneEngine.initExtensions">
            <summary>
This method init the OpenGL extension manager.
</summary>
            <summary>
This method init the OpenGL extension manager.
</summary>
        </member>
        <member name="M:SceneEngine.initWindow(System.Int32,System.Int32,System.Int32,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
            <summary>
This method init the window for rendering.
<param name="width">Window size width, default value = 500px.</param><param name="height">Window size height, default value = 500px.</param><param name="x_position">X pixel position that window will take in the display device, 0 = left side, default value = 0.</param><param name="y_position">Y pixel position that window will take in the display device, 0 = top side, default value = 0.</param><param name="title">This text will appear on top bar of our window.</param></summary>
            <summary>
This method init the window for rendering.
<param name="width">Window size width, default value = 500px.</param><param name="height">Window size height, default value = 500px.</param><param name="x_position">X pixel position that window will take in the display device, 0 = left side, default value = 0.</param><param name="y_position">Y pixel position that window will take in the display device, 0 = top side, default value = 0.</param><param name="title">This text will appear on top bar of our window.</param></summary>
        </member>
        <member name="M:SceneEngine.initFrameBuffer">
            <summary>
This method init the default OpenGL FrameBuffer.
</summary>
            <summary>
This method init the default OpenGL FrameBuffer.
</summary>
        </member>
        <member name="M:SceneEngine.initContext">
            <summary>
Initialize OpenGL context: context version, context profile, framebuffer and window.
</summary>
            <summary>
Initialize OpenGL context: context version, context profile, framebuffer and window.
</summary>
        </member>
        <member name="T:SceneEngine">
            <summary>
Class for managing several scenes.
This class let us to change all our pipeline configuration of our OpenGL 3.3
</summary>
        </member>
        <member name="M:Scene.loadShader(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
            <summary>
This method compile OpenGL shader from a file.
<param name="fileName">Path of the file.</param><param name="type">Type os shader (vertices or fragments).</param><returns>OpenGL shader id.</returns></summary>
            <summary>
This method compile OpenGL shader from a file.
<param name="fileName">Path of the file.</param><param name="type">Type os shader (vertices or fragments).</param><returns>OpenGL shader id.</returns></summary>
        </member>
        <member name="M:Scene.createFocalLight">
            <summary>
This method generate a focal light and add it to the scene.
</summary>
            <summary>
This method generate a focal light and add it to the scene.
</summary>
        </member>
        <member name="M:Scene.createDirectionalLight">
            <summary>
This method generate a directional light and add it to the scene.
</summary>
            <summary>
This method generate a directional light and add it to the scene.
</summary>
        </member>
        <member name="M:Scene.createPointLight">
            <summary>
This method generate a point light and add it to the scene.
</summary>
            <summary>
This method generate a point light and add it to the scene.
</summary>
        </member>
        <member name="M:Scene.createAssimpModel(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,Shade)">
            <summary>
This method generate a model from a file and add it to the scene.
<param name="filePath">Path of the model file.</param><param name="shade_mode">Shade mode.</param></summary>
            <summary>
This method generate a model from a file and add it to the scene.
<param name="filePath">Path of the model file.</param><param name="shade_mode">Shade mode.</param></summary>
        </member>
        <member name="M:Scene.createCubeModel(Shade)">
            <summary>
This method generate a cube and add it to the scene.
<param name="shade_mode">Shade mode.</param></summary>
            <summary>
This method generate a cube and add it to the scene.
<param name="shade_mode">Shade mode.</param></summary>
        </member>
        <member name="M:Scene.bindUBOs(System.Int32)">
            <summary>
This method bind the Uniform Buffers Objects used on shaders.
<param name="programId">Program where we create the Uniform Buffer Object.</param></summary>
            <summary>
This method bind the Uniform Buffers Objects used on shaders.
<param name="programId">Program where we create the Uniform Buffer Object.</param></summary>
        </member>
        <member name="M:Scene.keyboardInteraction(System.Byte,System.Int32,System.Int32)">
            <summary>
This method update scene elements when a key of the keyboard is pressed.
<param name="key">Character of the pressed key.</param><param name="x">X position of the mouse cursor when button was pressed.</param><param name="y">Y position of the mouse cursor when button was pressed.</param></summary>
            <summary>
This method update scene elements when a key of the keyboard is pressed.
<param name="key">Character of the pressed key.</param><param name="x">X position of the mouse cursor when button was pressed.</param><param name="y">Y position of the mouse cursor when button was pressed.</param></summary>
        </member>
        <member name="M:Scene.animate">
            <summary>
This method update elements properties.
</summary>
            <summary>
This method update element properties.
</summary>
        </member>
        <member name="M:Scene.render">
            <summary>
This method generate the final image to render on this frame.
</summary>
            <summary>
This method generate the final image to render on this frame.
</summary>
        </member>
        <member name="M:Scene.compilePrograms">
            <summary>
This method compile and link all model programs.
</summary>
            <summary>
This method compile and link all model programs.
</summary>
        </member>
        <member name="M:Scene.compileShaders">
            <summary>
This method compile all model vertex/fragment shaders.
</summary>
            <summary>
This method compile all model vertex/fragment shaders.
</summary>
        </member>
        <member name="M:Scene.createUBOs(System.Int32)">
            <summary>
This method create Uniform Buffer Objects.
<param name="programId">Program where we create the Uniform Buffer Object.</param></summary>
            <summary>
This method create and assign Uniform Buffer Objects to a program.
<param name="programId">Program where we create the Uniform Buffer Objects.</param></summary>
        </member>
        <member name="M:Scene.create">
            <summary>
This method generate full scene to be rendered.
</summary>
            <summary>
This method generate full scene to be rendered.
</summary>
        </member>
        <member name="M:Scene.setAmbientLighting(System.Single,System.Single,System.Single)">
            <summary>
Setter of <c>ambient_lighting</c> variable.
<param name="r">The component R of the color intensity.</param><param name="g">The component G of the color intensity.</param><param name="b">The component B of the color intensity.</param></summary>
            <summary>
Setter of <c>ambient_lighting</c> variable.
<param name="r">The component R of the color intensity.</param><param name="g">The component G of the color intensity.</param><param name="b">The component B of the color intensity.</param></summary>
        </member>
        <member name="M:Scene.setAmbientLighting(System.Single)">
            <summary>
Setter of <c>ambient_lighting</c> variable.
<param name="rgb">Value used for lighting ambient component on the scene.</param></summary>
            <summary>
Setter of <c>ambient_lighting</c> variable.
<param name="rgb">Value used for lighting ambient component on the scene.</param></summary>
        </member>
        <member name="M:Scene.setSelectedCamera(Camera)">
            <summary>
Setter of <c>selected_camera</c> variable.
<param name="camera">Camera we want use to render scene.</param></summary>
            <summary>
Setter of <c>selected_camera</c> variable.
<param name="camera">Camera we want use to render scene.</param></summary>
        </member>
        <member name="M:Scene.Dispose">
            <summary>
Destructor of <c>Scene</c> class.
</summary>
            <summary>
Destructor of <c>Scene</c> class.
</summary>
        </member>
        <member name="M:Scene.#ctor">
            <summary>
Constructor of <c>Scene</c> class.
</summary>
            <summary>
Constructor of <c>Scene</c> class.
</summary>
        </member>
        <member name="M:Scene.addFocalLight(FocalLight)">
            <summary>
This method add a focal light to the scene.
<param name="light">The focal light that will be added.</param></summary>
            <summary>
This method add a focal light to the scene.
<param name="light">The focal light that will be added.</param></summary>
        </member>
        <member name="M:Scene.addDirectionalLight(DirectionalLight)">
            <summary>
This method add a directional light to the scene.
<param name="light">The directional light that will be added.</param></summary>
            <summary>
This method add a directional light to the scene.
<param name="light">The directional light that will be added.</param></summary>
        </member>
        <member name="M:Scene.addPointLight(PointLight)">
            <summary>
This method add a point light to the scene.
<param name="light">The point light that will be added.</param></summary>
            <summary>
This method add a point light to the scene.
<param name="light">The point light that will be added.</param></summary>
        </member>
        <member name="M:Scene.addModel(Model)">
            <summary>
This method add a model to the scene.
<param name="model">The model that will be added.</param></summary>
            <summary>
This method add a model to the scene.
<param name="model">The model that will be added.</param></summary>
        </member>
        <member name="T:Scene">
            <summary>
Class with all scene elements to show in final render.
</summary>
        </member>
        <member name="M:FocalLight.loadDefault">
            <summary>
This method generate a focal light with default parameters (White, 0,0,0 position, -Z direction, 15º apperture and 0.5 attenuation factor).
</summary>
            <summary>
This method generate a focal light with default parameters (White, 0,0,0 position, -Z direction, 15º apperture and 0.5 attenuation factor).
</summary>
        </member>
        <member name="M:FocalLight.setAttenuation(System.Single)">
            <summary>
Setter of attenuation factor.
<param name="attenuation">The attenuation factor value.</param></summary>
            <summary>
Setter of attenuation factor.
<param name="attenuation">The attenuation factor value.</param></summary>
        </member>
        <member name="M:FocalLight.setAppertureAngle(System.Single,System.Boolean)">
            <summary>
Setter of apperture angle.
<param name="angle">The apperture angle in degrees or radians.</param><param name="radians">True if we pass de angle in radians, false at degrees.</param></summary>
            <summary>
Setter of apperture angle.
<param name="angle">The apperture angle in degrees or radians.</param><param name="radians">True if we pass de angle in radians, false at degrees.</param></summary>
        </member>
        <member name="M:FocalLight.setSpecularIntensity(System.Single,System.Single,System.Single)">
            <summary>
Setter of specular intensity.
<param name="r">The component R of the color intensity.</param><param name="g">The component G of the color intensity.</param><param name="b">The component B of the color intensity.</param></summary>
            <summary>
Setter of specular intensity.
<param name="r">The component R of the color intensity.</param><param name="g">The component G of the color intensity.</param><param name="b">The component B of the color intensity.</param></summary>
        </member>
        <member name="M:FocalLight.setSpecularIntensity(System.Single)">
            <summary>
Setter of specular intensity.
<param name="rgb">The color intensity with same values at 3 components.</param></summary>
            <summary>
Setter of specular intensity.
<param name="rgb">The color intensity with same values at 3 components.</param></summary>
        </member>
        <member name="M:FocalLight.setDiffuseIntensity(System.Single,System.Single,System.Single)">
            <summary>
Setter of diffuse intensity.
<param name="r">The component R of the color intensity.</param><param name="g">The component G of the color intensity.</param><param name="b">The component B of the color intensity.</param></summary>
            <summary>
Setter of diffuse intensity.
<param name="r">The component R of the color intensity.</param><param name="g">The component G of the color intensity.</param><param name="b">The component B of the color intensity.</param></summary>
        </member>
        <member name="M:FocalLight.setDiffuseIntensity(System.Single)">
            <summary>
Setter of diffuse intensity.
<param name="rgb">The color intensity with same values at 3 components.</param></summary>
            <summary>
Setter of diffuse intensity.
<param name="rgb">The color intensity with same values at 3 components.</param></summary>
        </member>
        <member name="M:FocalLight.setDirection(System.Single,System.Single,System.Single)">
            <summary>
Setter of direction.
<param name="x">The component X of the direction vector.</param><param name="y">The component Y of the direction vector.</param><param name="z">The component Z of the direction vector.</param></summary>
            <summary>
Setter of direction.
<param name="x">The component X of the direction vector.</param><param name="y">The component Y of the direction vector.</param><param name="z">The component Z of the direction vector.</param></summary>
        </member>
        <member name="M:FocalLight.setDirection(System.Single)">
            <summary>
Setter of direction.
<param name="xyz">The direction vector with same values at 3 components.</param></summary>
            <summary>
Setter of direction.
<param name="xyz">The direction vector with same values at 3 components.</param></summary>
        </member>
        <member name="M:FocalLight.setPosition(System.Single,System.Single,System.Single)">
            <summary>
Setter of position.
<param name="x">The component X of the position vector.</param><param name="y">The component Y of the position vector.</param><param name="z">The component Z of the position vector.</param></summary>
            <summary>
Setter of position.
<param name="x">The component X of the position vector.</param><param name="y">The component Y of the position vector.</param><param name="z">The component Z of the position vector.</param></summary>
        </member>
        <member name="M:FocalLight.setPosition(System.Single)">
            <summary>
Setter of position.
<param name="xyz">The position vector with same values at 3 components.</param></summary>
            <summary>
Setter of position.
<param name="xyz">The position vector with same values at 3 components.</param></summary>
        </member>
        <member name="M:FocalLight.Dispose">
            <summary>
Destructor of <c>FocalLight</c> class.
</summary>
            <summary>
Destructor of <c>FocalLight</c> class.
</summary>
        </member>
        <member name="M:FocalLight.#ctor">
            <summary>
Constructor of <c>FocalLight</c> class.
</summary>
            <summary>
Constructor of <c>FocalLight</c> class.
</summary>
        </member>
        <member name="T:FocalLight">
C++ FocalLight.h
Purpose: Header of FocalLight class

@author Alejandro Molina Quesada
@version 1.0
@date 12/04/2018

<summary>
Class for focal lights of the scene, store information about position, direction, intensity, color, apperture angle and attenuation.
</summary><summary>
Class for focal lights of the scene, store information about position, direction, intensity, color, apperture angle and attenuation.
</summary></member>
        <member name="M:DirectionalLight.loadDefault">
            <summary>
This method generate a directional light with default parameters (White and -Z direction).
</summary>
            <summary>
This method generate a directional light with default parameters (White and -Z direction).
</summary>
        </member>
        <member name="M:DirectionalLight.setSpecularIntensity(System.Single,System.Single,System.Single)">
            <summary>
Setter of specular intensity.
<param name="r">The component R of the color intensity.</param><param name="g">The component G of the color intensity.</param><param name="b">The component B of the color intensity.</param></summary>
            <summary>
Setter of specular intensity.
<param name="r">The component R of the color intensity.</param><param name="g">The component G of the color intensity.</param><param name="b">The component B of the color intensity.</param></summary>
        </member>
        <member name="M:DirectionalLight.setSpecularIntensity(System.Single)">
            <summary>
Setter of specular intensity.
<param name="rgb">The color intensity with same values at 3 components.</param></summary>
            <summary>
Setter of specular intensity.
<param name="rgb">The color intensity with same values at 3 components.</param></summary>
        </member>
        <member name="M:DirectionalLight.setDiffuseIntensity(System.Single,System.Single,System.Single)">
            <summary>
Setter of diffuse intensity.
<param name="r">The component R of the color intensity.</param><param name="g">The component G of the color intensity.</param><param name="b">The component B of the color intensity.</param></summary>
            <summary>
Setter of diffuse intensity.
<param name="r">The component R of the color intensity.</param><param name="g">The component G of the color intensity.</param><param name="b">The component B of the color intensity.</param></summary>
        </member>
        <member name="M:DirectionalLight.setDiffuseIntensity(System.Single)">
            <summary>
Setter of diffuse intensity.
<param name="rgb">The color intensity with same values at 3 components.</param></summary>
            <summary>
Setter of diffuse intensity.
<param name="rgb">The color intensity with same values at 3 components.</param></summary>
        </member>
        <member name="M:DirectionalLight.setDirection(System.Single,System.Single,System.Single)">
            <summary>
Setter of direction.
<param name="x">The component X of the direction vector.</param><param name="y">The component Y of the direction vector.</param><param name="z">The component Z of the direction vector.</param></summary>
            <summary>
Setter of direction.
<param name="x">The component X of the direction vector.</param><param name="y">The component Y of the direction vector.</param><param name="z">The component Z of the direction vector.</param></summary>
        </member>
        <member name="M:DirectionalLight.setDirection(System.Single)">
            <summary>
Setter of direction.
<param name="xyz">The direction vector with same values at 3 components.</param></summary>
            <summary>
Setter of direction.
<param name="xyz">The direction vector with same values at 3 components.</param></summary>
        </member>
        <member name="M:DirectionalLight.Dispose">
            <summary>
Destructor of <c>DirectionalLight</c> class.
</summary>
            <summary>
Destructor of <c>DirectionalLight</c> class.
</summary>
        </member>
        <member name="M:DirectionalLight.#ctor">
            <summary>
Constructor of <c>DirectionalLight</c> class.
</summary>
            <summary>
Constructor of <c>DirectionalLight</c> class.
</summary>
        </member>
        <member name="T:DirectionalLight">
C++ DirectionalLight.h
Purpose: Header of DirectionalLight class

@author Alejandro Molina Quesada
@version 1.0
@date 04/03/2018

<summary>
Class for directional lights of the scene, store information about direction, intensity and color.
</summary><summary>
Class for directional lights of the scene, store information about direction, intensity and color.
</summary></member>
        <member name="M:Model.animate">
            <summary>
This method update animation.
</summary>
            <summary>
This method update animation.
</summary>
        </member>
        <member name="M:Model.loadTex(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
This method create OpenGL texture from a file.
<param name="fileName">Path of the file.</param><returns>OpenGL texture id.</returns></summary>
            <summary>
This method create OpenGL texture from a file.
<param name="fileName">Path of the file.</param><returns>OpenGL texture id.</returns></summary>
        </member>
        <member name="M:Model.loadDefaultAssimpModelTextures">
            <summary>
This method generate default textures for an Assimp model.
</summary>
            <summary>
This method generate default textures for an Assimp model.
</summary>
        </member>
        <member name="M:Model.loadDefaultCubeTextures">
            <summary>
This method generate default textures for a cube.
</summary>
            <summary>
This method generate default textures for a cube.
</summary>
        </member>
        <member name="M:Model.loadAssimpModel(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,Shade)">
            <summary>
This method generate an imported model with default parameters.
<param name="filePath">Path of the model.</param><param name="shade_mode">Shade mode.</param></summary>
            <summary>
This method generate an imported model with default parameters.
<param name="filePath">Path of the model.</param><param name="shade_mode">Shade mode.</param></summary>
        </member>
        <member name="M:Model.loadDefaultCubeModel(Shade)">
            <summary>
This method generate a cube with default parameters.
<param name="shade_mode">Shade mode.</param></summary>
            <summary>
This method generate a cube with default parameters.
<param name="shade_mode">Shade mode.</param></summary>
        </member>
        <member name="M:Model.loadAttributes(System.Int32)">
            <summary>
This method obtain attribute locations and store them.
<param name="programId">Id of the program which contains this variables.</param></summary>
            <summary>
This method obtain attribute locations and store them.
<param name="programId">Id of the program which contains this variables.</param></summary>
        </member>
        <member name="M:Model.loadUniforms(System.Int32)">
            <summary>
This method obtain uniform locations and store them.
<param name="programId">Id of the program which contains this variables.</param></summary>
            <summary>
This method obtain uniform locations and store them.
<param name="programId">Id of the program which contains this variables.</param></summary>
        </member>
        <member name="M:Model.bind">
            <summary>
This method generate OpenGL variables used for render the model.
</summary>
            <summary>
This method generate OpenGL variables used for render the model.
</summary>
        </member>
        <member name="M:Model.setRotation(System.Single,System.Single,System.Single)">
            <summary>
Setter of model rotation.
<param name="x">The x component of rotation.</param><param name="y">The y component of rotation.</param><param name="z">The z component of rotation.</param></summary>
            <summary>
Setter of model rotation.
<param name="x">The x component of rotation.</param><param name="y">The y component of rotation.</param><param name="z">The z component of rotation.</param></summary>
        </member>
        <member name="M:Model.setPosition(System.Single,System.Single,System.Single)">
            <summary>
Setter of model position.
<param name="x">The x component of position.</param><param name="y">The y component of position.</param><param name="z">The z component of position.</param></summary>
            <summary>
Setter of model position.
<param name="x">The x component of position.</param><param name="y">The y component of position.</param><param name="z">The z component of position.</param></summary>
        </member>
        <member name="M:Model.Dispose">
            <summary>
Destructor of <c>Model</c> class.
</summary>
            <summary>
Destructor of <c>Model</c> class.
</summary>
        </member>
        <member name="M:Model.#ctor">
            <summary>
Constructor of <c>Model</c> class.
</summary>
            <summary>
Constructor of <c>Model</c> class.
</summary>
        </member>
        <member name="M:Model.bindTextures">
            <summary>
This method bind the textures of this model.
</summary>
            <summary>
This method bind the textures of this model.
</summary>
        </member>
        <member name="M:Model.createTextures">
            <summary>
This method create textures and store OpenGL textures id.
</summary>
            <summary>
This method create textures and store OpenGL textures id.
</summary>
        </member>
        <member name="M:Model.bindVBOs">
            <summary>
This method bind the VBOs of this model.
</summary>
            <summary>
This method bind the VBOs of this model.
</summary>
        </member>
        <member name="M:Model.bindVAO">
            <summary>
This method bind the VAO of this model.
</summary>
            <summary>
This method bind the VAO of this model.
</summary>
        </member>
        <member name="M:Model.createVBOs">
            <summary>
This method create VBOs and store OpenGL VBOs id.
</summary>
            <summary>
This method create VBOs and store OpenGL VBOs id.
</summary>
        </member>
        <member name="M:Model.createVAO">
            <summary>
This method create VAO and store OpenGL VAO id.
</summary>
            <summary>
This method create VAO and store OpenGL VAO id.
</summary>
        </member>
        <member name="T:Model">
            <summary>
Class for models of the scene, store information about vertices, normals, etc.
</summary>
        </member>
        <member name="M:aiMetadata.Dispose">
Destructor 
</member>
        <member name="M:aiMetadata.#ctor">
Constructor 
</member>
        <member name="F:aiMetadata.mValues">
Arrays of values, may not be NULL. Entries in this array may be NULL if the
      * corresponding property key has no assigned value. 
</member>
        <member name="F:aiMetadata.mKeys">
Arrays of keys, may not be NULL. Entries in this array may not be NULL as well. 
</member>
        <member name="F:aiMetadata.mNumProperties">
Length of the mKeys and mValues arrays, respectively 
</member>
        <member name="T:aiMetadata">
 Container for holding metadata.

 Metadata is a key-value store using string keys and values.

</member>
        <member name="M:GetAiType(System.Boolean)">
Helper functions to get the aiType enum entry for a type

</member>
        <member name="T:aiMetadataEntry">
 Metadata entry

 The type field uniquely identifies the underlying type of the data field

</member>
        <member name="T:aiMetadataType">
Enum used to distinguish data types

</member>
        <member name="F:aiAnimation.mMeshChannels">
The mesh animation channels. Each channel affects a single mesh.
     *  The array is mNumMeshChannels in size. 
</member>
        <member name="F:aiAnimation.mNumMeshChannels">
The number of mesh animation channels. Each channel affects
     *  a single mesh and defines vertex-based animation. 
</member>
        <member name="F:aiAnimation.mChannels">
The node animation channels. Each channel affects a single node.
     *  The array is mNumChannels in size. 
</member>
        <member name="F:aiAnimation.mNumChannels">
The number of bone animation channels. Each channel affects
     *  a single node. 
</member>
        <member name="F:aiAnimation.mTicksPerSecond">
Ticks per second. 0 if not specified in the imported file 
</member>
        <member name="F:aiAnimation.mDuration">
Duration of the animation in ticks.  
</member>
        <member name="F:aiAnimation.mName">
The name of the animation. If the modeling package this data was
     *  exported from does support only a single animation channel, this
     *  name is usually empty (length is zero). 
</member>
        <member name="T:aiAnimation">
An animation consists of keyframe data for a number of nodes. For
 *  each node affected by the animation a separate series of data is given.
</member>
        <member name="F:aiMeshAnim.mKeys">
Key frames of the animation. May not be NULL. 
</member>
        <member name="F:aiMeshAnim.mNumKeys">
Size of the #mKeys array. Must be 1, at least. 
</member>
        <member name="F:aiMeshAnim.mName">
Name of the mesh to be animated. An empty string is not allowed,
     *  animated meshes need to be named (not necessarily uniquely,
     *  the name can basically serve as wildcard to select a group
     *  of meshes with similar animation setup)
</member>
        <member name="T:aiMeshAnim">
Describes vertex-based animations for a single mesh or a group of
 *  meshes. Meshes carry the animation data for each frame in their
 *  aiMesh::mAnimMeshes array. The purpose of aiMeshAnim is to
 *  define keyframes linking each mesh attachment to a particular
 *  point in time. 
</member>
        <member name="F:aiNodeAnim.mPostState">
Defines how the animation behaves after the last
     *  key was processed.
     *
     *  The default value is aiAnimBehaviour_DEFAULT (the original
     *  transformation matrix of the affected node is taken).
</member>
        <member name="F:aiNodeAnim.mPreState">
Defines how the animation behaves before the first
     *  key is encountered.
     *
     *  The default value is aiAnimBehaviour_DEFAULT (the original
     *  transformation matrix of the affected node is used).
</member>
        <member name="F:aiNodeAnim.mScalingKeys">
The scaling keys of this animation channel. Scalings are
     *  specified as 3D vector. The array is mNumScalingKeys in size.
     *
     * If there are scaling keys, there will also be at least one
     * position and one rotation key.
</member>
        <member name="F:aiNodeAnim.mNumScalingKeys">
The number of scaling keys 
</member>
        <member name="F:aiNodeAnim.mRotationKeys">
The rotation keys of this animation channel. Rotations are
     *  given as quaternions,  which are 4D vectors. The array is
     *  mNumRotationKeys in size.
     *
     * If there are rotation keys, there will also be at least one
     * scaling and one position key. 
</member>
        <member name="F:aiNodeAnim.mNumRotationKeys">
The number of rotation keys 
</member>
        <member name="F:aiNodeAnim.mPositionKeys">
The position keys of this animation channel. Positions are
     * specified as 3D vector. The array is mNumPositionKeys in size.
     *
     * If there are position keys, there will also be at least one
     * scaling and one rotation key.
</member>
        <member name="F:aiNodeAnim.mNumPositionKeys">
The number of position keys 
</member>
        <member name="F:aiNodeAnim.mNodeName">
The name of the node affected by this animation. The node
     *  must exist and it must be unique.
</member>
        <member name="T:aiNodeAnim">
Describes the animation of a single node. The name specifies the
 *  bone/node which is affected by this animation channel. The keyframes
 *  are given in three separate series of values, one each for position,
 *  rotation and scaling. The transformation matrix computed from these
 *  values replaces the node's original transformation matrix at a
 *  specific time.
 *  This means all keys are absolute and not relative to the bone default pose.
 *  The order in which the transformations are applied is
 *  - as usual - scaling, rotation, translation.
 *
 *  @note All keys are returned in their correct, chronological order.
 *  Duplicate keys don't pass the validation step. Most likely there
 *  will be no negative time values, but they are not forbidden also ( so
 *  implementations need to cope with them! ) 
</member>
        <member name="T:aiAnimBehaviour">
Defines how an animation channel behaves outside the defined time
 *  range. This corresponds to aiNodeAnim::mPreState and
 *  aiNodeAnim::mPostState.
</member>
        <member name="F:_aiAnimBehaviour_Force32Bit">
This value is not used, it is just here to force the
     *  the compiler to map this enum to a 32 Bit integer  
</member>
        <member name="F:aiAnimBehaviour_REPEAT">
The animation is repeated.
     *
     *  If the animation key go from n to m and the current
     *  time is t, use the value at (t-n) % (|m-n|).
</member>
        <member name="F:aiAnimBehaviour_LINEAR">
The value of the nearest two keys is linearly
     *  extrapolated for the current time value.
</member>
        <member name="F:aiAnimBehaviour_CONSTANT">
The nearest key value is used without interpolation 
</member>
        <member name="F:aiAnimBehaviour_DEFAULT">
The value from the default node transformation is taken
</member>
        <member name="M:aiMeshKey.#ctor(System.Double,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Construction from a given time and key value 
</member>
        <member name="F:aiMeshKey.mValue">
Index into the aiMesh::mAnimMeshes array of the
     *  mesh coresponding to the #aiMeshAnim hosting this
     *  key frame. The referenced anim mesh is evaluated
     *  according to the rules defined in the docs for #aiAnimMesh.
</member>
        <member name="F:aiMeshKey.mTime">
The time of this key 
</member>
        <member name="T:aiMeshKey">
Binds a anim mesh to a specific point in time. 
</member>
        <member name="M:aiQuatKey.#ctor(System.Double,aiQuaterniont&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Construction from a given time and key value 
</member>
        <member name="F:aiQuatKey.mValue">
The value of this key 
</member>
        <member name="F:aiQuatKey.mTime">
The time of this key 
</member>
        <member name="T:aiQuatKey">
A time-value pair specifying a rotation for the given time.
 *  Rotations are expressed with quaternions. 
</member>
        <member name="F:aiVectorKey.mValue">
The value of this key 
</member>
        <member name="F:aiVectorKey.mTime">
The time of this key 
</member>
        <member name="T:aiVectorKey">
@file anim.h
 *  @brief Defines the data structures in which the imported animations
 *  are returned.

A time-value pair specifying a certain 3D vector for the given time. 
</member>
        <member name="M:aiGetMaterialTexture(aiMaterial!System.Runtime.CompilerServices.IsConst*,aiTextureType,System.UInt32,aiString*,aiTextureMapping*,System.UInt32*,System.Single*,aiTextureOp*,aiTextureMapMode*,System.UInt32*)">
@brief Helper function to get all values pertaining to a particular
 *  texture slot from a material structure.
 *
 *  This function is provided just for convenience. You could also read the
 *  texture by parsing all of its properties manually. This function bundles
 *  all of them in a huge function monster.
 *
 *  @param[in] mat Pointer to the input material. May not be NULL
 *  @param[in] type Specifies the texture stack to read from (e.g. diffuse,
 *     specular, height map ...).
 *  @param[in] index Index of the texture. The function fails if the
 *     requested index is not available for this texture type.
 *     #aiGetMaterialTextureCount() can be used to determine the number of
 *     textures in a particular texture stack.
 *  @param[out] path Receives the output path
 *      This parameter must be non-null.
 *  @param mapping The texture mapping mode to be used.
 *      Pass NULL if you're not interested in this information.
 *  @param[out] uvindex For UV-mapped textures: receives the index of the UV
 *      source channel. Unmodified otherwise.
 *      Pass NULL if you're not interested in this information.
 *  @param[out] blend Receives the blend factor for the texture
 *      Pass NULL if you're not interested in this information.
 *  @param[out] op Receives the texture blend operation to be perform between
 *      this texture and the previous texture.
 *      Pass NULL if you're not interested in this information.
 *  @param[out] mapmode Receives the mapping modes to be used for the texture.
 *      Pass NULL if you're not interested in this information. Otherwise,
 *      pass a pointer to an array of two aiTextureMapMode's (one for each
 *      axis, UV order).
 *  @param[out] flags Receives the the texture flags.
 *  @return AI_SUCCESS on success, otherwise something else. Have fun.
</member>
        <member name="M:aiGetMaterialTextureCount(aiMaterial!System.Runtime.CompilerServices.IsConst*,aiTextureType)">
Get the number of textures for a particular texture type.
 *  @param[in] pMat Pointer to the input material. May not be NULL
 *  @param type Texture type to check for
 *  @return Number of textures for this type.
 *  @note A texture can be easily queried using #aiGetMaterialTexture() 
</member>
        <member name="M:aiGetMaterialString(aiMaterial!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,aiString*)">
@brief Retrieve a string from the material property table
*
* See the sample for aiGetMaterialFloat for more information.
</member>
        <member name="M:aiGetMaterialUVTransform(aiMaterial!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,aiUVTransform*)">
@brief Retrieve a aiUVTransform value from the material property table
*
* See the sample for aiGetMaterialFloat for more information
</member>
        <member name="M:aiGetMaterialColor(aiMaterial!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,aiColor4t&lt;System.Single&gt;*)">
@brief Retrieve a color value from the material property table
*
* See the sample for aiGetMaterialFloat for more information
</member>
        <member name="M:aiGetMaterialInteger(aiMaterial!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,System.Int32*)">
@brief Retrieve an integer property with a specific key from a material
 *
 * See the sample for aiGetMaterialFloat for more information.
</member>
        <member name="M:aiGetMaterialIntegerArray(aiMaterial!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,System.Int32*,System.UInt32*)">
@brief Retrieve an array of integer values with a specific key
 *  from a material
 *
 * See the sample for aiGetMaterialFloatArray for more information.
</member>
        <member name="M:aiGetMaterialProperty(aiMaterial!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,aiMaterialProperty!System.Runtime.CompilerServices.IsConst**)">
@brief Retrieve a material property with a specific key from the material
 *
 * @param pMat Pointer to the input material. May not be NULL
 * @param pKey Key to search for. One of the AI_MATKEY_XXX constants.
 * @param type Specifies the type of the texture to be retrieved (
 *    e.g. diffuse, specular, height map ...)
 * @param index Index of the texture to be retrieved.
 * @param pPropOut Pointer to receive a pointer to a valid aiMaterialProperty
 *        structure or NULL if the key has not been found. 
</member>
        <member name="F:aiMaterial.mNumAllocated">
Storage allocated 
</member>
        <member name="F:aiMaterial.mNumProperties">
Number of properties in the data base 
</member>
        <member name="F:aiMaterial.mProperties">
List of all material properties loaded. 
</member>
        <member name="M:aiMaterial.CopyPropertyList(aiMaterial*,aiMaterial!System.Runtime.CompilerServices.IsConst*)">
Copy the property list of a material
     *  @param pcDest Destination material
     *  @param pcSrc Source material

</member>
        <member name="M:aiMaterial.Clear">
@brief Removes all properties from the material.
     *
     *  The data array remains allocated so adding new properties is quite fast.  
</member>
        <member name="M:aiMaterial.RemoveProperty(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32)">
@brief Remove a given key from the list.
     *
     *  The function fails if the key isn't found
     *  @param pKey Key to be deleted
     *  @param type Set by the AI_MATKEY_XXX macro
     *  @param index Set by the AI_MATKEY_XXX macro  
</member>
        <member name="M:aiMaterial.AddProperty(aiString!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32)">
@brief Add a string property with a given key and type info to the
     *  material structure
     *
     *  @param pInput Input string
     *  @param pKey Key/Usage of the property (AI_MATKEY_XXX)
     *  @param type Set by the AI_MATKEY_XXX macro
     *  @param index Set by the AI_MATKEY_XXX macro 
</member>
        <member name="M:aiMaterial.AddBinaryProperty(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,aiPropertyTypeInfo)">
@brief Add a property with a given key and type info to the material
     *  structure
     *
     *  @param pInput Pointer to input data
     *  @param pSizeInBytes Size of input data
     *  @param pKey Key/Usage of the property (AI_MATKEY_XXX)
     *  @param type Set by the AI_MATKEY_XXX macro
     *  @param index Set by the AI_MATKEY_XXX macro
     *  @param pType Type information hint 
</member>
        <member name="M:aiMaterial.GetTexture(aiTextureType,System.UInt32,aiString*,aiTextureMapping*,System.UInt32*,System.Single*,aiTextureOp*,aiTextureMapMode*)">
Helper function to get all parameters pertaining to a
     *  particular texture slot from a material.
    *
    *  This function is provided just for convenience, you could also
    *  read the single material properties manually.
    *  @param type Specifies the type of the texture to be retrieved (
    *    e.g. diffuse, specular, height map ...)
    *  @param index Index of the texture to be retrieved. The function fails
    *    if there is no texture of that type with this index.
    *    #GetTextureCount() can be used to determine the number of textures
    *    per texture type.
    *  @param path Receives the path to the texture.
    *    NULL is a valid value.
   *  @param mapping The texture mapping.
   *        NULL is allowed as value.
    *  @param uvindex Receives the UV index of the texture.
    *    NULL is a valid value.
    *  @param blend Receives the blend factor for the texture
    *    NULL is a valid value.
    *  @param op Receives the texture operation to be performed between
    *    this texture and the previous texture. NULL is allowed as value.
    *  @param mapmode Receives the mapping modes to be used for the texture.
    *    The parameter may be NULL but if it is a valid pointer it MUST
    *    point to an array of 3 aiTextureMapMode's (one for each
    *    axis: UVW order (=XYZ)).


@file material.inl
 *  @brief Defines the C++ getters for the material system

</member>
        <member name="M:aiMaterial.GetTextureCount(aiTextureType)">
Get the number of textures for a particular texture type.
     *  @param type Texture type to check for
     *  @return Number of textures for this type.
     *  @note A texture can be easily queried using #GetTexture() 
</member>
        <member name="T:aiMaterial">
@brief Data structure for a material
*
*  Material data is stored using a key-value structure. A single key-value
*  pair is called a 'material property'. C++ users should use the provided
*  member functions of aiMaterial to process material properties, C users
*  have to stick with the aiMaterialGetXXX family of unbound functions.
*  The library defines a set of standard keys (AI_MATKEY_XXX).

</member>
        <member name="F:aiMaterialProperty.mData">
Binary buffer to hold the property's value.
     * The size of the buffer is always mDataLength.

</member>
        <member name="F:aiMaterialProperty.mType">
Type information for the property.
     *
     * Defines the data layout inside the data buffer. This is used
     * by the library internally to perform debug checks and to
     * utilize proper type conversions.
     * (It's probably a hacky solution, but it works.)

</member>
        <member name="F:aiMaterialProperty.mDataLength">
Size of the buffer mData is pointing to, in bytes.
     *  This value may not be 0.

</member>
        <member name="F:aiMaterialProperty.mIndex">
Textures: Specifies the index of the texture.
     *  For non-texture properties, this member is always 0.

</member>
        <member name="F:aiMaterialProperty.mSemantic">
Textures: Specifies their exact usage semantic.
     * For non-texture properties, this member is always 0
     * (or, better-said, #aiTextureType_NONE).

</member>
        <member name="F:aiMaterialProperty.mKey">
Specifies the name of the property (key)
     *  Keys are generally case insensitive.

</member>
        <member name="T:aiPropertyTypeInfo">
@brief A very primitive RTTI system for the contents of material
 *  properties.

</member>
        <member name="F:_aiPTI_Force32Bit">
This value is not used. It is just there to force the
     *  compiler to map this enum to a 32 Bit integer.

</member>
        <member name="F:aiPTI_Buffer">
Simple binary buffer, content undefined. Not convertible to anything.

</member>
        <member name="F:aiPTI_Integer">
Array of (32 Bit) integers
     *
     *  It is possible to use aiGetMaterialFloat[Array]() (or the C++-API
     *  aiMaterial::Get()) to query properties stored in integer format.
     *  The material system performs the type conversion automatically.

</member>
        <member name="F:aiPTI_String">
The material property is an aiString.
     *
     *  Arrays of strings aren't possible, aiGetMaterialString() (or the
     *  C++-API aiMaterial::Get()) *must* be used to query a string property.

</member>
        <member name="F:aiPTI_Float">
Array of single-precision (32 Bit) floats
     *
     *  It is possible to use aiGetMaterialInteger[Array]() (or the C++-API
     *  aiMaterial::Get()) to query properties stored in floating-point format.
     *  The material system performs the type conversion automatically.

</member>
        <member name="F:aiUVTransform.mRotation">
Rotation - in counter-clockwise direction.
     *
     *  The rotation angle is specified in radians. The
     *  rotation center is 0.5f|0.5f. The default value
     *  0.f.

</member>
        <member name="F:aiUVTransform.mScaling">
Scaling on the u and v axes.
     *
     *  The default value is (1|1).

</member>
        <member name="F:aiUVTransform.mTranslation">
Translation on the u and v axes.
     *
     *  The default value is (0|0).

</member>
        <member name="T:aiUVTransform">
@brief Defines how an UV channel is transformed.
 *
 *  This is just a helper structure for the #AI_MATKEY_UVTRANSFORM key.
 *  See its documentation for more details.
 *
 *  Typically you'll want to build a matrix of this information. However,
 *  we keep separate scaling/translation/rotation values to make it
 *  easier to process and optimize UV transformations internally.

</member>
        <member name="F:aiBlendMode_Additive">
Additive blending
     *
     *  Formula:
     *  @code
     *  SourceColor*1 + DestColor*1
     *  @endcode

</member>
        <member name="F:aiBlendMode_Default">
Formula:
@code
SourceColor*SourceAlpha + DestColor*(1-SourceAlpha)
@endcode

</member>
        <member name="T:aiTextureFlags">
@brief Defines some mixed flags for a particular texture.
 *
 *  Usually you'll instruct your cg artists how textures have to look like ...
 *  and how they will be processed in your application. However, if you use
 *  Assimp for completely generic loading purposes you might also need to
 *  process these flags in order to display as many 'unknown' 3D models as
 *  possible correctly.
 *
 *  This corresponds to the #AI_MATKEY_TEXFLAGS property.

</member>
        <member name="F:aiTextureFlags_IgnoreAlpha">
Explicit request to the application to ignore the alpha channel
     *  of the texture.
     *
     *  Mutually exclusive with #aiTextureFlags_UseAlpha.

</member>
        <member name="F:aiTextureFlags_UseAlpha">
Explicit request to the application to process the alpha channel
     *  of the texture.
     *
     *  Mutually exclusive with #aiTextureFlags_IgnoreAlpha. These
     *  flags are set if the library can say for sure that the alpha
     *  channel is used/is not used. If the model format does not
     *  define this, it is left to the application to decide whether
     *  the texture alpha channel - if any - is evaluated or not.

</member>
        <member name="F:aiTextureFlags_Invert">
The texture's color values have to be inverted (componentwise 1-n)

</member>
        <member name="F:aiShadingMode_Fresnel">
Fresnel shading

</member>
        <member name="F:aiShadingMode_NoShading">
No shading at all. Constant light influence of 1.0.

</member>
        <member name="F:aiShadingMode_CookTorrance">
CookTorrance-Shading per pixel
     *
     *  Special shader for metallic surfaces.

</member>
        <member name="F:aiShadingMode_Minnaert">
Minnaert-Shading per pixel
     *
     *  Extension to standard Lambertian shading, taking the
     *  "darkness" of the material into account

</member>
        <member name="F:aiShadingMode_OrenNayar">
OrenNayar-Shading per pixel
     *
     *  Extension to standard Lambertian shading, taking the
     *  roughness of the material into account

</member>
        <member name="F:aiShadingMode_Toon">
Toon-Shading per pixel
     *
     *  Also known as 'comic' shader.

</member>
        <member name="F:aiShadingMode_Blinn">
Phong-Blinn-Shading

</member>
        <member name="F:aiShadingMode_Phong">
Phong-Shading -

</member>
        <member name="F:aiShadingMode_Gouraud">
Simple Gouraud shading.

</member>
        <member name="F:aiShadingMode_Flat">
Flat shading. Shading is done on per-face base,
     *  diffuse only. Also known as 'faceted shading'.

</member>
        <member name="F:aiTextureType_UNKNOWN">
Unknown texture
     *
     *  A texture reference that does not match any of the definitions
     *  above is considered to be 'unknown'. It is still imported,
     *  but is excluded from any further postprocessing.

</member>
        <member name="F:aiTextureType_REFLECTION">
Reflection texture
     *
     * Contains the color of a perfect mirror reflection.
     * Rarely used, almost never for real-time applications.

</member>
        <member name="F:aiTextureType_LIGHTMAP">
Lightmap texture (aka Ambient Occlusion)
     *
     *  Both 'Lightmaps' and dedicated 'ambient occlusion maps' are
     *  covered by this material property. The texture contains a
     *  scaling value for the final color value of a pixel. Its
     *  intensity is not affected by incoming light.

</member>
        <member name="F:aiTextureType_DISPLACEMENT">
Displacement texture
     *
     *  The exact purpose and format is application-dependent.
     *  Higher color values stand for higher vertex displacements.

</member>
        <member name="F:aiTextureType_OPACITY">
The texture defines per-pixel opacity.
     *
     *  Usually 'white' means opaque and 'black' means
     *  'transparency'. Or quite the opposite. Have fun.

</member>
        <member name="F:aiTextureType_SHININESS">
The texture defines the glossiness of the material.
     *
     *  The glossiness is in fact the exponent of the specular
     *  (phong) lighting equation. Usually there is a conversion
     *  function defined to map the linear color values in the
     *  texture to a suitable exponent. Have fun.

</member>
        <member name="F:aiTextureType_NORMALS">
The texture is a (tangent space) normal-map.
     *
     *  Again, there are several conventions for tangent-space
     *  normal maps. Assimp does (intentionally) not
     *  distinguish here.

</member>
        <member name="F:aiTextureType_HEIGHT">
The texture is a height map.
     *
     *  By convention, higher gray-scale values stand for
     *  higher elevations from the base height.

</member>
        <member name="F:aiTextureType_EMISSIVE">
The texture is added to the result of the lighting
     *  calculation. It isn't influenced by incoming light.

</member>
        <member name="F:aiTextureType_AMBIENT">
The texture is combined with the result of the ambient
     *  lighting equation.

</member>
        <member name="F:aiTextureType_SPECULAR">
The texture is combined with the result of the specular
     *  lighting equation.

</member>
        <member name="F:aiTextureType_DIFFUSE">
The texture is combined with the result of the diffuse
     *  lighting equation.

</member>
        <member name="F:aiTextureType_NONE">
Dummy value.
     *
     *  No texture, but the value to be used as 'texture semantic'
     *  (#aiMaterialProperty::mSemantic) for all material properties
     *  *not* related to textures.

</member>
        <member name="T:aiTextureMapping">
@brief Defines how the mapping coords for a texture are generated.
 *
 *  Real-time applications typically require full UV coordinates, so the use of
 *  the aiProcess_GenUVCoords step is highly recommended. It generates proper
 *  UV channels for non-UV mapped objects, as long as an accurate description
 *  how the mapping should look like (e.g spherical) is given.
 *  See the #AI_MATKEY_MAPPING property for more details.

</member>
        <member name="F:aiTextureMapping_OTHER">
Undefined mapping. Have fun. 
</member>
        <member name="F:aiTextureMapping_PLANE">
Planar mapping 
</member>
        <member name="F:aiTextureMapping_BOX">
Cubic mapping 
</member>
        <member name="F:aiTextureMapping_CYLINDER">
Cylindrical mapping 
</member>
        <member name="F:aiTextureMapping_SPHERE">
Spherical mapping 
</member>
        <member name="F:aiTextureMapping_UV">
The mapping coordinates are taken from an UV channel.
     *
     *  The #AI_MATKEY_UVWSRC key specifies from which UV channel
     *  the texture coordinates are to be taken from (remember,
     *  meshes can have more than one UV channel).

</member>
        <member name="T:aiTextureMapMode">
@brief Defines how UV coordinates outside the [0...1] range are handled.
 *
 *  Commonly referred to as 'wrapping mode'.

</member>
        <member name="F:aiTextureMapMode_Mirror">
A texture coordinate u|v becomes u%1|v%1 if (u-(u%1))%2 is zero and
     *  1-(u%1)|1-(v%1) otherwise

</member>
        <member name="F:aiTextureMapMode_Decal">
If the texture coordinates for a pixel are outside [0...1]
     *  the texture is not applied to that pixel

</member>
        <member name="F:aiTextureMapMode_Clamp">
Texture coordinates outside [0...1]
     *  are clamped to the nearest valid value.

</member>
        <member name="F:aiTextureMapMode_Wrap">
A texture coordinate u|v is translated to u%1|v%1

</member>
        <member name="F:aiTextureOp_SignedAdd">
T = T1 + (T2-0.5) 
</member>
        <member name="F:aiTextureOp_SmoothAdd">
T = (T1 + T2) - (T1 * T2) 
</member>
        <member name="F:aiTextureOp_Divide">
T = T1 / T2 
</member>
        <member name="F:aiTextureOp_Subtract">
T = T1 - T2 
</member>
        <member name="F:aiTextureOp_Add">
T = T1 + T2 
</member>
        <member name="F:aiTextureOp_Multiply">
T = T1 * T2 
</member>
        <member name="M:aiCamera.GetCameraMatrix(aiMatrix4x4t&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get a *right-handed* camera matrix from me
     *  @param out Camera matrix to be filled

</member>
        <member name="F:aiCamera.mAspect">
Screen aspect ratio.
     *
     * This is the ration between the width and the height of the
     * screen. Typical values are 4/3, 1/2 or 1/1. This value is
     * 0 if the aspect ratio is not defined in the source file.
     * 0 is also the default value.

</member>
        <member name="F:aiCamera.mClipPlaneFar">
Distance of the far clipping plane from the camera.
     *
     * The far clipping plane must, of course, be further away than the
     * near clipping plane. The default value is 1000.f. The ratio
     * between the near and the far plane should not be too
     * large (between 1000-10000 should be ok) to avoid floating-point
     * inaccuracies which could lead to z-fighting.

</member>
        <member name="F:aiCamera.mClipPlaneNear">
Distance of the near clipping plane from the camera.
     *
     * The value may not be 0.f (for arithmetic reasons to prevent
     * a division through zero). The default value is 0.1f.

</member>
        <member name="F:aiCamera.mHorizontalFOV">
Half horizontal field of view angle, in radians.
     *
     *  The field of view angle is the angle between the center
     *  line of the screen and the left or right border.
     *  The default value is 1/4PI.

</member>
        <member name="F:aiCamera.mLookAt">
'LookAt' - vector of the camera coordinate system relative to
     *  the coordinate space defined by the corresponding node.
     *
     *  This is the viewing direction of the user.
     *  The default value is 0|0|1. The vector
     *  may be normalized, but it needn't.

</member>
        <member name="F:aiCamera.mUp">
'Up' - vector of the camera coordinate system relative to
     *  the coordinate space defined by the corresponding node.
     *
     *  The 'right' vector of the camera coordinate system is
     *  the cross product of  the up and lookAt vectors.
     *  The default value is 0|1|0. The vector
     *  may be normalized, but it needn't.

</member>
        <member name="F:aiCamera.mPosition">
Position of the camera relative to the coordinate space
     *  defined by the corresponding node.
     *
     *  The default value is 0|0|0.

</member>
        <member name="F:aiCamera.mName">
The name of the camera.
     *
     *  There must be a node in the scenegraph with the same name.
     *  This node specifies the position of the camera in the scene
     *  hierarchy and can be animated.

</member>
        <member name="F:aiLight.mSize">
Size of area light source. 
</member>
        <member name="F:aiLight.mAngleOuterCone">
Outer angle of a spot light's light cone.
     *
     *  The spot light does not affect objects outside this angle.
     *  The angle is given in radians. It is 2PI for point lights and
     *  undefined for directional lights. The outer angle must be
     *  greater than or equal to the inner angle.
     *  It is assumed that the application uses a smooth
     *  interpolation between the inner and the outer cone of the
     *  spot light.

</member>
        <member name="F:aiLight.mAngleInnerCone">
Inner angle of a spot light's light cone.
     *
     *  The spot light has maximum influence on objects inside this
     *  angle. The angle is given in radians. It is 2PI for point
     *  lights and undefined for directional lights.

</member>
        <member name="F:aiLight.mColorAmbient">
Ambient color of the light source
     *
     *  The ambient light color is multiplied with the ambient
     *  material color to obtain the final color that contributes
     *  to the ambient shading term. Most renderers will ignore
     *  this value it, is just a remaining of the fixed-function pipeline
     *  that is still supported by quite many file formats.

</member>
        <member name="F:aiLight.mColorSpecular">
Specular color of the light source
     *
     *  The specular light color is multiplied with the specular
     *  material color to obtain the final color that contributes
     *  to the specular shading term.

</member>
        <member name="F:aiLight.mColorDiffuse">
Diffuse color of the light source
     *
     *  The diffuse light color is multiplied with the diffuse
     *  material color to obtain the final color that contributes
     *  to the diffuse shading term.

</member>
        <member name="F:aiLight.mAttenuationQuadratic">
Quadratic light attenuation factor.
     *
     *  The intensity of the light source at a given distance 'd' from
     *  the light's position is
     *  @code
     *  Atten = 1/( att0 + att1 * d + att2 * d*d)
     *  @endcode
     *  This member corresponds to the att2 variable in the equation.
     *  Naturally undefined for directional lights.

</member>
        <member name="F:aiLight.mAttenuationLinear">
Linear light attenuation factor.
     *
     *  The intensity of the light source at a given distance 'd' from
     *  the light's position is
     *  @code
     *  Atten = 1/( att0 + att1 * d + att2 * d*d)
     *  @endcode
     *  This member corresponds to the att1 variable in the equation.
     *  Naturally undefined for directional lights.

</member>
        <member name="F:aiLight.mAttenuationConstant">
Constant light attenuation factor.
     *
     *  The intensity of the light source at a given distance 'd' from
     *  the light's position is
     *  @code
     *  Atten = 1/( att0 + att1 * d + att2 * d*d)
     *  @endcode
     *  This member corresponds to the att0 variable in the equation.
     *  Naturally undefined for directional lights.

</member>
        <member name="F:aiLight.mUp">
Up direction of the light source in space. Relative to the
     *  transformation of the node corresponding to the light.
     *
     *  The direction is undefined for point lights. The vector
     *  may be normalized, but it needn't.

</member>
        <member name="F:aiLight.mDirection">
Direction of the light source in space. Relative to the
     *  transformation of the node corresponding to the light.
     *
     *  The direction is undefined for point lights. The vector
     *  may be normalized, but it needn't.

</member>
        <member name="F:aiLight.mPosition">
Position of the light source in space. Relative to the
     *  transformation of the node corresponding to the light.
     *
     *  The position is undefined for directional lights.

</member>
        <member name="F:aiLight.mType">
The type of the light source.
     *
     * aiLightSource_UNDEFINED is not a valid value for this member.

</member>
        <member name="F:aiLight.mName">
The name of the light source.
     *
     *  There must be a node in the scenegraph with the same name.
     *  This node specifies the position of the light in the scene
     *  hierarchy and can be animated.

</member>
        <member name="T:aiLightSourceType">
@file light.h
 *  @brief Defines the aiLight data structure

Enumerates all supported types of light sources.

</member>
        <member name="F:_aiLightSource_Force32Bit">
This value is not used. It is just there to force the
     *  compiler to map this enum to a 32 Bit integer.

</member>
        <member name="F:aiMesh.mAnimMeshes">
NOT CURRENTLY IN USE. Attachment meshes for this mesh, for vertex-based animation.
     *  Attachment meshes carry replacement data for some of the
     *  mesh'es vertex components (usually positions, normals). 
</member>
        <member name="F:aiMesh.mNumAnimMeshes">
NOT CURRENTLY IN USE. The number of attachment meshes 
</member>
        <member name="F:aiMesh.mName">
Name of the mesh. Meshes can be named, but this is not a
     *  requirement and leaving this field empty is totally fine.
     *  There are mainly three uses for mesh names:
     *   - some formats name nodes and meshes independently.
     *   - importers tend to split meshes up to meet the
     *      one-material-per-mesh requirement. Assigning
     *      the same (dummy) name to each of the result meshes
     *      aids the caller at recovering the original mesh
     *      partitioning.
     *   - Vertex animations refer to meshes by their names.
     *
</member>
        <member name="F:aiMesh.mMaterialIndex">
The material used by this mesh.
     * A mesh uses only a single material. If an imported model uses
     * multiple materials, the import splits up the mesh. Use this value
     * as index into the scene's material list.

</member>
        <member name="F:aiMesh.mBones">
The bones of this mesh.
    * A bone consists of a name by which it can be found in the
    * frame hierarchy and a set of vertex weights.

</member>
        <member name="F:aiMesh.mNumBones">
The number of bones this mesh contains.
    * Can be 0, in which case the mBones array is NULL.

</member>
        <member name="F:aiMesh.mFaces">
The faces the mesh is constructed from.
    * Each face refers to a number of vertices by their indices.
    * This array is always present in a mesh, its size is given
    * in mNumFaces. If the #AI_SCENE_FLAGS_NON_VERBOSE_FORMAT
    * is NOT set each face references an unique set of vertices.

</member>
        <member name="F:aiMesh.mNumUVComponents">
Specifies the number of components for a given UV channel.
    * Up to three channels are supported (UVW, for accessing volume
    * or cube maps). If the value is 2 for a given channel n, the
    * component p.z of mTextureCoords[n][p] is set to 0.0f.
    * If the value is 1 for a given channel, p.y is set to 0.0f, too.
    * @note 4D coords are not supported

</member>
        <member name="F:aiMesh.mTextureCoords">
Vertex texture coords, also known as UV channels.
    * A mesh may contain 0 to AI_MAX_NUMBER_OF_TEXTURECOORDS per
    * vertex. NULL if not present. The array is mNumVertices in size.

</member>
        <member name="F:aiMesh.mColors">
Vertex color sets.
    * A mesh may contain 0 to #AI_MAX_NUMBER_OF_COLOR_SETS vertex
    * colors per vertex. NULL if not present. Each array is
    * mNumVertices in size if present.

</member>
        <member name="F:aiMesh.mBitangents">
Vertex bitangents.
    * The bitangent of a vertex points in the direction of the positive
    * Y texture axis. The array contains normalized vectors, NULL if not
    * present. The array is mNumVertices in size.
    * @note If the mesh contains tangents, it automatically also contains
    * bitangents.

</member>
        <member name="F:aiMesh.mTangents">
Vertex tangents.
    * The tangent of a vertex points in the direction of the positive
    * X texture axis. The array contains normalized vectors, NULL if
    * not present. The array is mNumVertices in size. A mesh consisting
    * of points and lines only may not have normal vectors. Meshes with
    * mixed primitive types (i.e. lines and triangles) may have
    * normals, but the normals for vertices that are only referenced by
    * point or line primitives are undefined and set to qNaN.  See
    * the #mNormals member for a detailed discussion of qNaNs.
    * @note If the mesh contains tangents, it automatically also
    * contains bitangents.

</member>
        <member name="F:aiMesh.mNormals">
Vertex normals.
    * The array contains normalized vectors, NULL if not present.
    * The array is mNumVertices in size. Normals are undefined for
    * point and line primitives. A mesh consisting of points and
    * lines only may not have normal vectors. Meshes with mixed
    * primitive types (i.e. lines and triangles) may have normals,
    * but the normals for vertices that are only referenced by
    * point or line primitives are undefined and set to QNaN (WARN:
    * qNaN compares to inequal to *everything*, even to qNaN itself.
    * Using code like this to check whether a field is qnan is:
    * @code
    * #define IS_QNAN(f) (f != f)
    * @endcode
    * still dangerous because even 1.f == 1.f could evaluate to false! (
    * remember the subtleties of IEEE754 artithmetics). Use stuff like
    * @c fpclassify instead.
    * @note Normal vectors computed by Assimp are always unit-length.
    * However, this needn't apply for normals that have been taken
    *   directly from the model file.

</member>
        <member name="F:aiMesh.mVertices">
Vertex positions.
    * This array is always present in a mesh. The array is
    * mNumVertices in size.

</member>
        <member name="F:aiMesh.mNumFaces">
The number of primitives (triangles, polygons, lines) in this  mesh.
    * This is also the size of the mFaces array.
    * The maximum value for this member is #AI_MAX_FACES.

</member>
        <member name="F:aiMesh.mNumVertices">
The number of vertices in this mesh.
    * This is also the size of all of the per-vertex data arrays.
    * The maximum value for this member is #AI_MAX_VERTICES.

</member>
        <member name="F:aiMesh.mPrimitiveTypes">
Bitwise combination of the members of the #aiPrimitiveType enum.
     * This specifies which types of primitives are present in the mesh.
     * The "SortByPrimitiveType"-Step can be used to make sure the
     * output meshes consist of one primitive type each.

</member>
        <member name="T:aiMesh">
@brief A mesh represents a geometry or model with a single material.
*
* It usually consists of a number of vertices and a series of primitives/faces
* referencing the vertices. In addition there might be a series of bones, each
* of them addressing a number of vertices with a certain weight. Vertex data
* is presented in channels with each channel containing a single per-vertex
* information such as a set of texture coords or a normal vector.
* If a data pointer is non-null, the corresponding data stream is present.
* From C++-programs you can also use the comfort functions Has*() to
* test for the presence of various data streams.
*
* A Mesh uses only a single material which is referenced by a material ID.
* @note The mPositions member is usually not optional. However, vertex positions
* *could* be missing if the #AI_SCENE_FLAGS_INCOMPLETE flag is set in
* @code
* aiScene::mFlags
* @endcode

</member>
        <member name="M:aiAnimMesh.HasTangentsAndBitangents">
Check whether the anim mesh overrides the vertex tangents
     *  and bitangents of its host mesh. As for aiMesh,
     *  tangents and bitangents always go together. 
</member>
        <member name="M:aiAnimMesh.HasNormals">
Check whether the anim mesh overrides the vertex normals
     *  of its host mesh
</member>
        <member name="M:aiAnimMesh.HasPositions">
Check whether the anim mesh overrides the vertex positions
     *  of its host mesh
</member>
        <member name="F:aiAnimMesh.mNumVertices">
The number of vertices in the aiAnimMesh, and thus the length of all
     * the member arrays.
     *
     * This has always the same value as the mNumVertices property in the
     * corresponding aiMesh. It is duplicated here merely to make the length
     * of the member arrays accessible even if the aiMesh is not known, e.g.
     * from language bindings.

</member>
        <member name="F:aiAnimMesh.mTextureCoords">
Replacement for aiMesh::mTextureCoords 
</member>
        <member name="F:aiAnimMesh.mColors">
Replacement for aiMesh::mColors 
</member>
        <member name="F:aiAnimMesh.mBitangents">
Replacement for aiMesh::mBitangents. 
</member>
        <member name="F:aiAnimMesh.mTangents">
Replacement for aiMesh::mTangents. 
</member>
        <member name="F:aiAnimMesh.mNormals">
Replacement for aiMesh::mNormals.  
</member>
        <member name="F:aiAnimMesh.mVertices">
Replacement for aiMesh::mVertices. If this array is non-NULL,
     *  it *must* contain mNumVertices entries. The corresponding
     *  array in the host mesh must be non-NULL as well - animation
     *  meshes may neither add or nor remove vertex components (if
     *  a replacement array is NULL and the corresponding source
     *  array is not, the source data is taken instead)
</member>
        <member name="T:aiAnimMesh">
@brief NOT CURRENTLY IN USE. An AnimMesh is an attachment to an #aiMesh stores per-vertex
 *  animations for a particular frame.
 *
 *  You may think of an #aiAnimMesh as a `patch` for the host mesh, which
 *  replaces only certain vertex data streams at a particular time.
 *  Each mesh stores n attached attached meshes (#aiMesh::mAnimMeshes).
 *  The actual relationship between the time line and anim meshes is
 *  established by #aiMeshAnim, which references singular mesh attachments
 *  by their ID and binds them to a time offset.

</member>
        <member name="T:aiPrimitiveType">
@brief Enumerates the types of geometric primitives supported by Assimp.
 *
 *  @see aiFace Face data structure
 *  @see aiProcess_SortByPType Per-primitive sorting of meshes
 *  @see aiProcess_Triangulate Automatic triangulation
 *  @see AI_CONFIG_PP_SBP_REMOVE Removal of specific primitive types.

</member>
        <member name="F:_aiPrimitiveType_Force32Bit">
This value is not used. It is just here to force the
     *  compiler to map this enum to a 32 Bit integer.

</member>
        <member name="F:aiPrimitiveType_POLYGON">
A higher-level polygon with more than 3 edges.
     *
     * A triangle is a polygon, but polygon in this context means
     * "all polygons that are not triangles". The "Triangulate"-Step
     * is provided for your convenience, it splits all polygons in
     * triangles (which are much easier to handle).

</member>
        <member name="F:aiPrimitiveType_TRIANGLE">
A triangular primitive.
     *
     * A triangle consists of three indices.

</member>
        <member name="F:aiPrimitiveType_LINE">
A line primitive.
     *
     * This is a line defined through a start and an end position.
     * #aiFace contains exactly two indices for such a primitive.

</member>
        <member name="F:aiPrimitiveType_POINT">
A point primitive.
     *
     * This is just a single vertex in the virtual world,
     * #aiFace contains just one index for such a primitive.

</member>
        <member name="T:aiBone">
@brief A single bone of a mesh.
 *
 *  A bone has a name by which it can be found in the frame hierarchy and by
 *  which it can be addressed by animations. In addition it has a number of
 *  influences on vertices.

</member>
        <member name="T:aiVertexWeight">
@brief A single influence of a bone on a vertex.

</member>
        <member name="F:aiTexture.pcData">
Data of the texture.
     *
     * Points to an array of mWidth * mHeight aiTexel's.
     * The format of the texture data is always ARGB8888 to
     * make the implementation for user of the library as easy
     * as possible. If mHeight = 0 this is a pointer to a memory
     * buffer of size mWidth containing the compressed texture
     * data. Good luck, have fun!

</member>
        <member name="F:aiTexture.achFormatHint">
A hint from the loader to make it easier for applications
     *  to determine the type of embedded compressed textures.
     *
     * If mHeight != 0 this member is undefined. Otherwise it
     * is set set to '\\0\\0\\0\\0' if the loader has no additional
     * information about the texture file format used OR the
     * file extension of the format without a trailing dot. If there
     * are multiple file extensions for a format, the shortest
     * extension is chosen (JPEG maps to 'jpg', not to 'jpeg').
     * E.g. 'dds\\0', 'pcx\\0', 'jpg\\0'.  All characters are lower-case.
     * The fourth character will always be '\\0'.

</member>
        <member name="F:aiTexture.mHeight">
Height of the texture, in pixels
     *
     * If this value is zero, pcData points to an compressed texture
     * in any format (e.g. JPEG).

</member>
        <member name="F:aiTexture.mWidth">
Width of the texture, in pixels
     *
     * If mHeight is zero the texture is compressed in a format
     * like JPEG. In this case mWidth specifies the size of the
     * memory area pcData is pointing to, in bytes.

</member>
        <member name="T:aiTexture">
Helper structure to describe an embedded texture
 *
 * Normally textures are contained in external files but some file formats embed
 * them directly in the model file. There are two types of embedded textures:
 * 1. Uncompressed textures. The color data is given in an uncompressed format.
 * 2. Compressed textures stored in a file format like png or jpg. The raw file
 * bytes are given so the application must utilize an image decoder (e.g. DevIL) to
 * get access to the actual color data.
 *
 * Embedded textures are referenced from materials using strings like "*0", "*1", etc.
 * as the texture paths (a single asterisk character followed by the
 * zero-based index of the texture in the aiScene::mTextures array).

</member>
        <member name="T:aiTexel">
@file texture.h
 *  @brief Defines texture helper structures for the library
 *
 * Used for file formats which embed their textures into the model file.
 * Supported are both normal textures, which are stored as uncompressed
 * pixels, and "compressed" textures, which are stored in a file format
 * such as PNG or TGA.

@def AI_MAKE_EMBEDDED_TEXNAME
 *  Used to build the reserved path name used by the material system to
 *  reference textures that are embedded into their corresponding
 *  model files. The parameter specifies the index of the texture
 *  (zero-based, in the aiScene::mTextures array)

@brief Helper structure to represent a texel in a ARGB8888 format
*
*  Used by aiTexture.

</member>
        <member name="F:_aiComponent_Force32Bit">
This value is not used. It is just there to force the
     *  compiler to map this enum to a 32 Bit integer. 
</member>
        <member name="F:aiComponent_MATERIALS">
Removes all materials. One default material will
     * be generated, so aiScene::mNumMaterials will be 1. 
</member>
        <member name="F:aiComponent_MESHES">
Removes all meshes (aiScene::mMeshes). 
</member>
        <member name="F:aiComponent_CAMERAS">
Removes all cameras (aiScene::mCameras).
     * The corresponding scenegraph nodes are NOT removed.
     * use the #aiProcess_OptimizeGraph step to do this 
</member>
        <member name="F:aiComponent_LIGHTS">
Removes all light sources (aiScene::mLights).
     * The corresponding scenegraph nodes are NOT removed.
     * use the #aiProcess_OptimizeGraph step to do this 
</member>
        <member name="F:aiComponent_TEXTURES">
Removes all embedded textures (aiScene::mTextures) 
</member>
        <member name="F:aiComponent_ANIMATIONS">
Removes all node animations (aiScene::mAnimations).
     * The corresponding scenegraph nodes are NOT removed.
     * use the #aiProcess_OptimizeGraph step to do this 
</member>
        <member name="F:aiComponent_BONEWEIGHTS">
Removes all bone weights from all meshes.
     * The scenegraph nodes corresponding to the bones are NOT removed.
     * use the #aiProcess_OptimizeGraph step to do this 
</member>
        <member name="F:aiComponent_TEXCOORDS">
ALL texture UV sets
     * aiComponent_TEXCOORDn(N) to specify the N'th set  
</member>
        <member name="F:aiComponent_COLORS">
ALL color sets
     * Use aiComponent_COLORn(N) to specify the N'th set 
</member>
        <member name="F:aiComponent_TANGENTS_AND_BITANGENTS">
Tangents and bitangents go always together ... 
</member>
        <member name="F:aiComponent_NORMALS">
Normal vectors 
</member>
        <member name="F:aiMemoryInfo.total">
Total storage allocated for the full import. 
</member>
        <member name="F:aiMemoryInfo.lights">
Storage allocated for light data 
</member>
        <member name="F:aiMemoryInfo.cameras">
Storage allocated for camera data 
</member>
        <member name="F:aiMemoryInfo.animations">
Storage allocated for animation data 
</member>
        <member name="F:aiMemoryInfo.nodes">
Storage allocated for node data 
</member>
        <member name="F:aiMemoryInfo.meshes">
Storage allocated for mesh data 
</member>
        <member name="F:aiMemoryInfo.materials">
Storage allocated for material data  
</member>
        <member name="F:aiMemoryInfo.textures">
Storage allocated for texture data 
</member>
        <member name="M:aiMemoryInfo.#ctor">
Default constructor 
</member>
        <member name="T:aiMemoryInfo">
Stores the memory requirements for different components (e.g. meshes, materials,
 *  animations) of an import. All sizes are in bytes.
 *  @see Importer::GetMemoryRequirements()

</member>
        <member name="T:aiDefaultLogStream">
@brief Enumerates predefined log streaming destinations.
 *  Logging to these streams can be enabled with a single call to
 *   #LogStream::createDefaultStream.

</member>
        <member name="F:_AI_DLS_ENFORCE_ENUM_SIZE">
@cond never
     *  Force 32-bit size enum

@endcond
</member>
        <member name="F:aiDefaultLogStream_DEBUGGER">
MSVC only: Stream the log the the debugger
     * (this relies on OutputDebugString from the Win32 SDK)

</member>
        <member name="F:aiDefaultLogStream_STDERR">
Stream the log to std::cerr 
</member>
        <member name="F:aiDefaultLogStream_STDOUT">
Stream the log to std::cout 
</member>
        <member name="F:aiDefaultLogStream_FILE">
Stream the log to a file 
</member>
        <member name="T:aiOrigin">
Seek origins (for the virtual file system API).
 *  Much cooler than using SEEK_SET, SEEK_CUR or SEEK_END.

</member>
        <member name="F:_AI_ORIGIN_ENFORCE_ENUM_SIZE">
@cond never
    *   Force 32-bit size enum

@endcond
</member>
        <member name="F:aiOrigin_END">
End of the file, offsets must be negative 
</member>
        <member name="F:aiOrigin_CUR">
Current position of the file pointer 
</member>
        <member name="F:aiOrigin_SET">
Beginning of the file 
</member>
        <member name="T:aiReturn">
Standard return type for some library functions.
 * Rarely used, and if, mostly in the C API.

</member>
        <member name="F:_AI_ENFORCE_ENUM_SIZE">
@cond never
     *  Force 32-bit size enum

@endcond
</member>
        <member name="F:aiReturn_OUTOFMEMORY">
Indicates that not enough memory was available
     * to perform the requested operation

</member>
        <member name="F:aiReturn_FAILURE">
Indicates that a function failed 
</member>
        <member name="F:aiReturn_SUCCESS">
Indicates that a function was successful 
</member>
        <member name="F:aiString.data">
String buffer. Size limit is MAXLEN 
</member>
        <member name="F:aiString.length">
Binary length of the string excluding the terminal 0. This is NOT the
     *  logical length of strings containing UTF-8 multibyte sequences! It's
     *  the number of bytes from the beginning of the string to its end.
</member>
        <member name="M:aiString.C_Str">
Returns a pointer to the underlying zero-terminated array of characters 
</member>
        <member name="M:aiString.Clear">
Clear the string - reset its length to zero 
</member>
        <member name="M:aiString.Append(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Append a string to the string 
</member>
        <member name="M:aiString.op_Inequality(aiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inverse comparison operator 
</member>
        <member name="M:aiString.op_Equality(aiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Comparison operator 
</member>
        <member name="M:aiString.op_Assign(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assign a cstd::string to the string 
</member>
        <member name="M:aiString.op_Assign(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Assign a const char* to the string 
</member>
        <member name="M:aiString.Set(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Copy a const char* to the aiString 
</member>
        <member name="M:aiString.Set(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy a std::string to the aiString 
</member>
        <member name="M:aiString.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor from std::string 
</member>
        <member name="M:aiString.#ctor(aiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor 
</member>
        <member name="M:aiString.#ctor">
Default constructor, the string is set to have zero length 
</member>
        <member name="T:aiString">
Represents an UTF-8 string, zero byte terminated.
 *
 *  The character set of an aiString is explicitly defined to be UTF-8. This Unicode
 *  transformation was chosen in the belief that most strings in 3d files are limited
 *  to ASCII, thus the character set needed to be strictly ASCII compatible.
 *
 *  Most text file loaders provide proper Unicode input file handling, special unicode
 *  characters are correctly transcoded to UTF8 and are kept throughout the libraries'
 *  import pipeline.
 *
 *  For most applications, it will be absolutely sufficient to interpret the
 *  aiString as ASCII data and work with it as one would work with a plain char*.
 *  Windows users in need of proper support for i.e asian characters can use the
 *  MultiByteToWideChar(), WideCharToMultiByte() WinAPI functionality to convert the
 *  UTF-8 strings to their working character set (i.e. MBCS, WideChar).
 *
 *  We use this representation instead of std::string to be C-compatible. The
 *  (binary) length of such a string is limited to MAXLEN characters (including the
 *  the terminating zero).

</member>
        <member name="M:aiColor3D.IsBlack">
Check whether a color is black 
</member>
        <member name="M:aiColor3D.op_Subscript(System.UInt32)">
Access a specific color component 

Access a specific color component 
</member>
        <member name="M:aiColor3D.op_Multiply(System.Single)">
Multiply with a scalar 
</member>
        <member name="M:aiColor3D.op_Multiply(aiColor3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Component-wise multiplication 
</member>
        <member name="M:aiColor3D.op_Subtraction(aiColor3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Component-wise subtraction 
</member>
        <member name="M:aiColor3D.op_Addition(aiColor3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Component-wise addition 
</member>
        <member name="M:aiColor3D.op_LessThan(aiColor3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Component-wise comparison 
</member>
        <member name="M:aiColor3D.op_Inequality(aiColor3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Component-wise inverse comparison 
</member>
        <member name="M:aiColor3D.op_Equality(aiColor3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Component-wise comparison 
</member>
        <member name="T:aiColor3D">
Represents a color in Red-Green-Blue space.

</member>
        <member name="T:aiRay">
Represents a ray

</member>
        <member name="T:aiPlane">
Represents a plane in a three-dimensional, euclidean space

</member>
        <member name="T:Assimp.Intern.AllocateFromAssimpHeap">
@brief Internal helper class to utilize our internal new/delete
     *    routines for allocating object of this and derived classes.
     *
     * By doing this you can safely share class objects between Assimp
     * and the application - it works even over DLL boundaries. A good
     * example is the #IOSystem where the application allocates its custom
     * #IOSystem, then calls #Importer::SetIOSystem(). When the Importer
     * destructs, Assimp calls operator delete on the stored #IOSystem.
     * If it lies on a different heap than Assimp is working with,
     * the application is determined to crash.

</member>
        <member name="M:Texture.Dispose">
            <summary>
Destructor of <c>Texture</c> class.
</summary>
            <summary>
Destructor of <c>Texture</c> class.
</summary>
        </member>
        <member name="M:Texture.#ctor">
            <summary>
Constructor of <c>Texture</c> class.
</summary>
            <summary>
Constructor of <c>Texture</c> class.
</summary>
        </member>
        <member name="T:Texture">
C++ Texture.h
Purpose: Header of Texture class

@author Alejandro Molina Quesada
@version 1.0
@date 16/04/2018

<summary>
Class for model textures.
</summary></member>
        <member name="M:Shader.loadToonFragmentShader">
            <summary>
This method load a fragment shader for a toon shading method.
</summary>
            <summary>
This method load a fragment shader for a toon shading method.
</summary>
        </member>
        <member name="M:Shader.loadToonVertexShader">
            <summary>
This method load a vertex shader for a toon shading method.
</summary>
            <summary>
This method load a vertex shader for a toon shading method.
</summary>
        </member>
        <member name="M:Shader.loadPhongBumpFragmentShader">
            <summary>
This method load a fragment shader for a bumped Phong shading method.
</summary>
            <summary>
This method load a fragment shader for a bumped Phong shading method.
</summary>
        </member>
        <member name="M:Shader.loadPhongBumpVertexShader">
            <summary>
This method load a vertex shader for a bumped Phong shading method.
</summary>
            <summary>
This method load a vertex shader for a bumped Phong shading method.
</summary>
        </member>
        <member name="M:Shader.loadBlinnPhongFragmentShader">
            <summary>
This method load a fragment shader for Blinn-Phong shading method.
</summary>
            <summary>
This method load a fragment shader for Blinn-Phong shading method.
</summary>
        </member>
        <member name="M:Shader.loadBlinnPhongVertexShader">
            <summary>
This method load a vertex shader for Blinn-Phong shading method.
</summary>
            <summary>
This method load a vertex shader for Blinn-Phong shading method.
</summary>
        </member>
        <member name="M:Shader.loadPhongFragmentShader">
            <summary>
This method load a fragment shader for classic Phong shading method.
</summary>
            <summary>
This method load a fragment shader for classic Phong shading method.
</summary>
        </member>
        <member name="M:Shader.loadPhongGeometryShader">
            <summary>
This method load a geometry shader for classic Phong shading method.
</summary>
            <summary>
This method load a geometry shader for classic Phong shading method.
</summary>
        </member>
        <member name="M:Shader.loadPhongVertexShader">
            <summary>
This method load a vertex shader for classic Phong shading method.
</summary>
            <summary>
This method load a vertex shader for classic Phong shading method.
</summary>
        </member>
        <member name="M:Shader.loadCommonUniformsFragment">
            <summary>
This method load more usual uniform variables for fragment shader.
</summary>
            <summary>
This method load more usual uniform variables for fragment shader.
</summary>
        </member>
        <member name="M:Shader.loadCommonAttributesGeometry">
            <summary>
This method load more usual attributes for geometry shader.
</summary>
            <summary>
This method load more usual attributes for geometry shader.
</summary>
        </member>
        <member name="M:Shader.loadCommonAttributesVertex">
            <summary>
This method load more usual attributes for vertex shader.
</summary>
            <summary>
This method load more usual attributes for vertex shader.
</summary>
        </member>
        <member name="M:Shader.loadCommonUniformsGeometry">
            <summary>
This method load more usual uniform variables for geometry shader.
</summary>
            <summary>
This method load more usual uniform variables for geometry shader.
</summary>
        </member>
        <member name="M:Shader.loadCommonUniformsVertex">
            <summary>
This method load more usual uniform variables for vertex shader.
</summary>
            <summary>
This method load more usual uniform variables for vertex shader.
</summary>
        </member>
        <member name="M:Shader.Dispose">
            <summary>
Destructor of <c>Shader</c> class.
</summary>
            <summary>
Destructor of <c>Shader</c> class.
</summary>
        </member>
        <member name="M:Shader.#ctor">
            <summary>
Constructor of <c>Shader</c> class.
</summary>
            <summary>
Constructor of <c>Shader</c> class.
</summary>
        </member>
        <member name="T:Shader">
            <summary>
Class for shaders of the models, store information about uniform variables and attributes.
</summary>
        </member>
        <member name="T:Shade">
C++ Model.h
Purpose: Header of Model class

@author Alejandro Molina Quesada
@version 1.0
@date 03/03/2018

C++ Shader.h
Purpose: Header of Shader class

@author Alejandro Molina Quesada
@version 1.0
@date 04/03/2018

</member>
        <member name="D:ptrdiff_t">
C++ SceneEngine.h
Purpose: Header of SceneEngine class

@author Alejandro Molina Quesada
@version 1.0
@date 03/03/2018


C++ Shader.h
Purpose: Header of Shader class

@author Alejandro Molina Quesada
@version 1.0
@date 04/03/2018


C++ Scene.h
Purpose: Header of Scene class

@author Alejandro Molina Quesada
@version 1.0
@date 03/03/2018

</member>
        <member name="M:loadTexture(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This function convert the content of an image into an unsigned char array.
<returns>The unsigned char array.</returns></summary>
            <summary>
This function convert the content of an image into an unsigned char array.
<returns>The unsigned char array.</returns></summary>
        </member>
        <member name="M:loadStringFromFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This function convert the content of a file into an unsigned char array.
<returns>The unsigned char array.</returns></summary>
            <summary>
This function convert the content of a file into an unsigned char array.
<returns>The unsigned char array.</returns></summary>
        </member>
        <member name="M:PointLight.loadDefault">
            <summary>
This method generate a point light with default parameters (White and 0,0,0 position).
</summary>
            <summary>
This method generate a point light with default parameters (White and 0,0,0 position).
</summary>
        </member>
        <member name="M:PointLight.setSpecularIntensity(System.Single,System.Single,System.Single)">
            <summary>
Setter of specular intensity.
<param name="r">The component R of the color intensity.</param><param name="g">The component G of the color intensity.</param><param name="b">The component B of the color intensity.</param></summary>
            <summary>
Setter of specular intensity.
<param name="r">The component R of the color intensity.</param><param name="g">The component G of the color intensity.</param><param name="b">The component B of the color intensity.</param></summary>
        </member>
        <member name="M:PointLight.setSpecularIntensity(System.Single)">
            <summary>
Setter of specular intensity.
<param name="rgb">The color intensity with same values at 3 components.</param></summary>
            <summary>
Setter of specular intensity.
<param name="rgb">The color intensity with same values at 3 components.</param></summary>
        </member>
        <member name="M:PointLight.setDiffuseIntensity(System.Single,System.Single,System.Single)">
            <summary>
Setter of diffuse intensity.
<param name="r">The component R of the color intensity.</param><param name="g">The component G of the color intensity.</param><param name="b">The component B of the color intensity.</param></summary>
            <summary>
Setter of diffuse intensity.
<param name="r">The component R of the color intensity.</param><param name="g">The component G of the color intensity.</param><param name="b">The component B of the color intensity.</param></summary>
        </member>
        <member name="M:PointLight.setDiffuseIntensity(System.Single)">
            <summary>
Setter of diffuse intensity.
<param name="rgb">The color intensity with same values at 3 components.</param></summary>
            <summary>
Setter of diffuse intensity.
<param name="rgb">The color intensity with same values at 3 components.</param></summary>
        </member>
        <member name="M:PointLight.setPosition(System.Single,System.Single,System.Single)">
            <summary>
Setter of position.
<param name="x">The component X of the position vector.</param><param name="y">The component Y of the position vector.</param><param name="z">The component Z of the position vector.</param></summary>
            <summary>
Setter of position.
<param name="x">The component X of the position vector.</param><param name="y">The component Y of the position vector.</param><param name="z">The component Z of the position vector.</param></summary>
        </member>
        <member name="M:PointLight.setPosition(System.Single)">
            <summary>
Setter of position.
<param name="xyz">The position vector with same values at 3 components.</param></summary>
            <summary>
Setter of position.
<param name="xyz">The position vector with same values at 3 components.</param></summary>
        </member>
        <member name="M:PointLight.Dispose">
            <summary>
Destructor of <c>PointLight</c> class.
</summary>
            <summary>
Destructor of <c>PointLight</c> class.
</summary>
        </member>
        <member name="M:PointLight.#ctor">
            <summary>
Constructor of <c>PointLight</c> class.
</summary>
            <summary>
Constructor of <c>PointLight</c> class.
</summary>
        </member>
        <member name="T:PointLight">
            <summary>
Class for point lights of the scene, store information about position, intensity and color.
</summary>
C++ PointLight.h
Purpose: Header of PointLight class

@author Alejandro Molina Quesada
@version 1.0
@date 08/04/2018

<summary>
Class for point lights of the scene, store information about position, intensity and color.
</summary></member>
        <member name="M:Animation.updateDefaultAnimation(glm.tvec3&lt;System.Single,0x0&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,glm.tvec3&lt;System.Single,0x0&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This method generate a default animation.
<param name="position">The model position to update.</param><param name="rotation">The model rotation to update.</param></summary>
            <summary>
This method generate a default animation.
<param name="position">The model position to update.</param><param name="rotation">The model rotation to update.</param></summary>
        </member>
        <member name="M:Animation.Dispose">
            <summary>
Destructor of <c>Animation</c> class.
</summary>
            <summary>
Destructor of <c>Animation</c> class.
</summary>
        </member>
        <member name="M:Animation.#ctor">
            <summary>
Constructor of <c>Animation</c> class.
</summary>
            <summary>
Constructor of <c>Animation</c> class.
</summary>
        </member>
        <member name="T:Animation">
            <summary>
Class to define animations of translation, rotation or scale.
</summary>
C++ Animation.h
Purpose: Header of Animation class

@author Alejandro Molina Quesada
@version 1.0
@date 19/04/2018

<summary>
Class to define animations of translation, rotation or scale.
</summary></member>
        <member name="M:Camera.updateProjectionMatrix(System.Single,System.Single,System.Single,System.Single)">
            <summary>
This method update values of projection matrix (frustrum).
<param name="r">Right limit of frustrum.</param><param name="l">Left limit of frustrum.</param><param name="t">Top limit of frustrum.</param><param name="b">Bottom limit of frustrum.</param></summary>
            <summary>
This method update values of projection matrix (frustrum).
<param name="r">Right limit of frustrum.</param><param name="l">Left limit of frustrum.</param><param name="t">Top limit of frustrum.</param><param name="b">Bottom limit of frustrum.</param></summary>
        </member>
        <member name="M:Camera.Dispose">
            <summary>
Destructor of <c>Camera</c> class.
</summary>
            <summary>
Destructor of <c>Camera</c> class.
</summary>
        </member>
        <member name="M:Camera.#ctor">
            <summary>
Constructor of <c>Camera</c> class.
</summary>
            <summary>
Constructor of <c>Camera</c> class.
</summary>
        </member>
        <member name="T:Camera">
            <summary>
Class to define the camera, view and projection (frustrum and pespective).
</summary>
        </member>
        <member name="M:glm_i128_interleave(__m128i)">
@ref core
@file glm/detail/func_integer_simd.inl
@ref simd
@file glm/simd/integer.h
</member>
        <member name="T:__JUMP_BUFFER">
@ref core
@file glm/detail/func_integer.inl
</member>
        <member name="M:glm.unpackHalf2x16(System.UInt32)">
Returns a two-component floating-point vector with components obtained by unpacking a 32-bit unsigned integer into a pair of 16-bit values, 
interpreting those values as 16-bit floating-point numbers according to the OpenGL Specification, 
and converting them to 32-bit floating-point values.
The first component of the vector is obtained from the 16 least-significant bits of v; 
the second component is obtained from the 16 most-significant bits of v.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackHalf2x16.xml">GLSL unpackHalf2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packHalf2x16(glm.tvec2&lt;System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns an unsigned integer obtained by converting the components of a two-component floating-point vector 
to the 16-bit floating-point representation found in the OpenGL Specification, 
and then packing these two 16- bit integers into a 32-bit unsigned integer.
The first vector component specifies the 16 least-significant bits of the result; 
the second component specifies the 16 most-significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packHalf2x16.xml">GLSL packHalf2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackDouble2x32(System.Double)">
Returns a two-component unsigned integer vector representation of v. 
The bit-level representation of v is preserved. 
The first component of the vector contains the 32 least significant bits of the double; 
the second component consists the 32 most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackDouble2x32.xml">GLSL unpackDouble2x32 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packDouble2x32(glm.tvec2&lt;System.UInt32,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a double-precision value obtained by packing the components of v into a 64-bit value. 
If an IEEE 754 Inf or NaN is created, it will not signal, and the resulting floating point value is unspecified. 
Otherwise, the bit- level representation of v is preserved. 
The first vector component specifies the 32 least significant bits; 
the second component specifies the 32 most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packDouble2x32.xml">GLSL packDouble2x32 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackSnorm4x8(System.UInt32)">
First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers. 
Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackSnorm4x8: clamp(f / 127.0, -1, +1)

The first component of the returned vector will be extracted from the least significant bits of the input; 
the last component will be extracted from the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm4x8.xml">GLSL unpackSnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackUnorm4x8(System.UInt32)">
First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers. 
Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackUnorm4x8: f / 255.0

The first component of the returned vector will be extracted from the least significant bits of the input; 
the last component will be extracted from the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm4x8.xml">GLSL unpackUnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackSnorm2x16(System.UInt32)">
First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers. 
Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackSnorm2x16: clamp(f / 32767.0, -1, +1)

The first component of the returned vector will be extracted from the least significant bits of the input; 
the last component will be extracted from the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm2x16.xml">GLSL unpackSnorm2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackUnorm2x16(System.UInt32)">
First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers. 
Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackUnorm2x16: f / 65535.0 

The first component of the returned vector will be extracted from the least significant bits of the input; 
the last component will be extracted from the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm2x16.xml">GLSL unpackUnorm2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packSnorm4x8(glm.tvec4&lt;System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values. 
Then, the results are packed into the returned 32-bit unsigned integer.

The conversion for component c of v to fixed point is done as follows:
packSnorm4x8:	round(clamp(c, -1, +1) * 127.0) 

The first component of the vector will be written to the least significant bits of the output; 
the last component will be written to the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml">GLSL packSnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packUnorm4x8(glm.tvec4&lt;System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values. 
Then, the results are packed into the returned 32-bit unsigned integer.

The conversion for component c of v to fixed point is done as follows:
packUnorm4x8:	round(clamp(c, 0, +1) * 255.0)

The first component of the vector will be written to the least significant bits of the output; 
the last component will be written to the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml">GLSL packUnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packSnorm2x16(glm.tvec2&lt;System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values. 
Then, the results are packed into the returned 32-bit unsigned integer.

The conversion for component c of v to fixed point is done as follows:
packSnorm2x16: round(clamp(v, -1, +1) * 32767.0)

The first component of the vector will be written to the least significant bits of the output; 
the last component will be written to the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm2x16.xml">GLSL packSnorm2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packUnorm2x16(glm.tvec2&lt;System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@addtogroup core_func_packing
@{
First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values. 
Then, the results are packed into the returned 32-bit unsigned integer.

The conversion for component c of v to fixed point is done as follows:
packUnorm2x16: round(clamp(c, 0, +1) * 65535.0) 

The first component of the vector will be written to the least significant bits of the output; 
the last component will be written to the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm2x16.xml">GLSL packUnorm2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm_mat4_matrixCompMult(__m128!System.Runtime.CompilerServices.IsConst*,__m128!System.Runtime.CompilerServices.IsConst*,__m128*)">
@ref core
@file glm/detail/func_matrix_simd.inl
@ref simd
@file glm/simd/matrix.h
</member>
        <member name="M:glm_vec4_dot(__m128,__m128)">
@ref core
@file glm/detail/func_geometric_simd.inl
@ref simd
@file glm/simd/geometric.h
</member>
        <member name="M:glm_vec4_add(__m128,__m128)">
@ref core
@file glm/detail/func_common_simd.inl
@ref simd
@file glm/simd/common.h
</member>
        <member name="M:glm.uintBitsToFloat(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a floating-point value corresponding to a
unsigned integer encoding of a floating-point value.
If an inf or NaN is passed in, it will not signal, and the
resulting floating point value is unspecified. Otherwise,
the bit-level representation is preserved.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/uintBitsToFloat.xml">GLSL uintBitsToFloat man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.3 Common Functions</a></member>
        <member name="M:glm.intBitsToFloat(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a floating-point value corresponding to a signed
integer encoding of a floating-point value.
If an inf or NaN is passed in, it will not signal, and the
resulting floating point value is unspecified. Otherwise,
the bit-level representation is preserved.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/intBitsToFloat.xml">GLSL intBitsToFloat man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.3 Common Functions</a></member>
        <member name="M:glm.floatBitsToUint(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a unsigned integer value representing
the encoding of a floating-point value. The floatingpoint
value's bit-level representation is preserved.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/floatBitsToUint.xml">GLSL floatBitsToUint man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.3 Common Functions</a></member>
        <member name="M:glm.floatBitsToInt(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a signed integer value representing
the encoding of a floating-point value. The floating-point
value's bit-level representation is preserved.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/floatBitsToInt.xml">GLSL floatBitsToInt man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.3 Common Functions</a></member>
        <member name="M:glm_vec1_sqrt_lowp(__m128)">
@ref core
@file glm/detail/func_exponential_simd.inl
@ref simd
@file glm/simd/experimental.h
</member>
        <member name="D:glm.f64quat">
Default double-precision floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat4">
Default double-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat3">
Default double-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat2">
Default double-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat4x4">
Default double-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat4x3">
Default double-precision floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat4x2">
Default double-precision floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat3x4">
Default double-precision floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat3x3">
Default double-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat3x2">
Default double-precision floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat2x4">
Default double-precision floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat2x3">
Default double-precision floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat2x2">
Default double-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64vec4">
Default double-precision floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f64vec3">
Default double-precision floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f64vec2">
Default double-precision floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f64vec1">
Default double-precision floating-point vector of 1 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f32quat">
Default single-precision floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat4">
Default single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat3">
Default single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat2">
Default single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat4x4">
Default single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat4x3">
Default single-precision floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat4x2">
Default single-precision floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat3x4">
Default single-precision floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat3x3">
Default single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat3x2">
Default single-precision floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat2x4">
Default single-precision floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat2x3">
Default single-precision floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat2x2">
Default single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32vec4">
Default single-precision floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f32vec3">
Default single-precision floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f32vec2">
Default single-precision floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f32vec1">
Default single-precision floating-point vector of 1 components.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat4">
Default single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat3">
Default single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat2">
Default single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat4x4">
Default single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat4x3">
Default single-precision floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat4x2">
Default single-precision floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat3x4">
Default single-precision floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat3x3">
Default single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat3x2">
Default single-precision floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat2x4">
Default single-precision floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat2x3">
Default single-precision floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat2x2">
Default single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fvec4">
Default single-precision floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.fvec3">
Default single-precision floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.fvec2">
Default single-precision floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.fvec1">
Default single-precision floating-point vector of 1 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64quat">
High double-precision floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32quat">
High single-precision floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64quat">
Medium double-precision floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32quat">
Medium single-precision floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64quat">
Low double-precision floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32quat">
Low single-precision floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat4">
High double-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat3">
High double-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat2">
High double-precision floating-point 1x1 matrix.
@see gtc_type_precision
High double-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat4x4">
High double-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat4x3">
High double-precision floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat4x2">
High double-precision floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat3x4">
High double-precision floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat3x3">
High double-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat3x2">
High double-precision floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat2x4">
High double-precision floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat2x3">
High double-precision floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat2x2">
High double-precision floating-point 1x1 matrix.
@see gtc_type_precision
High double-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat4">
Medium double-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat3">
Medium double-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat2">
Medium double-precision floating-point 1x1 matrix.
@see gtc_type_precision
Medium double-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat4x4">
Medium double-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat4x3">
Medium double-precision floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat4x2">
Medium double-precision floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat3x4">
Medium double-precision floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat3x3">
Medium double-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat3x2">
Medium double-precision floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat2x4">
Medium double-precision floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat2x3">
Medium double-precision floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat2x2">
Medium double-precision floating-point 1x1 matrix.
@see gtc_type_precision
Medium double-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat4">
Low double-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat3">
Low double-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat2">
Low double-precision floating-point 1x1 matrix.
@see gtc_type_precision
Low double-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat4x4">
Low double-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat4x3">
Low double-precision floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat4x2">
Low double-precision floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat3x4">
Low double-precision floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat3x3">
Low double-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat3x2">
Low double-precision floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat2x4">
Low double-precision floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat2x3">
Low double-precision floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat2x2">
Low double-precision floating-point 1x1 matrix.
@see gtc_type_precision
Low double-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat4">
High single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat3">
High single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat2">
High single-precision floating-point 1x1 matrix.
@see gtc_type_precision
High single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat4x4">
High single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat4x3">
High single-precision floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat4x2">
High single-precision floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat3x4">
High single-precision floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat3x3">
High single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat3x2">
High single-precision floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat2x4">
High single-precision floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat2x3">
High single-precision floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat2x2">
High single-precision floating-point 1x1 matrix.
@see gtc_type_precision
High single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat4">
Medium single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat3">
Medium single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat2">
Medium single-precision floating-point 1x1 matrix.
@see gtc_type_precision
Medium single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat4x4">
Medium single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat4x3">
Medium single-precision floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat4x2">
Medium single-precision floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat3x4">
Medium single-precision floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat3x3">
Medium single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat3x2">
Medium single-precision floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat2x4">
Medium single-precision floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat2x3">
Medium single-precision floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat2x2">
High single-precision floating-point 1x1 matrix.
@see gtc_type_precision
Low single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat4">
Low single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat3">
Low single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat2">
Low single-precision floating-point 1x1 matrix.
@see gtc_type_precision
Low single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat4x4">
Low single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat4x3">
Low single-precision floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat4x2">
Low single-precision floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat3x4">
Low single-precision floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat3x3">
Low single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat3x2">
Low single-precision floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat2x4">
Low single-precision floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat2x3">
Low single-precision floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat2x2">
Low single-precision floating-point 1x1 matrix.
@see gtc_type_precision
Low single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat4">
High single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat3">
High single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat2">
High single-precision floating-point 1x1 matrix.
@see gtc_type_precision
High single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat4x4">
High single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat4x3">
High single-precision floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat4x2">
High single-precision floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat3x4">
High single-precision floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat3x3">
High single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat3x2">
High single-precision floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat2x4">
High single-precision floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat2x3">
High single-precision floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat2x2">
High single-precision floating-point 1x1 matrix.
@see gtc_type_precision
High single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat4">
Medium single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat3">
Medium single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat2">
Medium single-precision floating-point 1x1 matrix.
@see gtc_type_precision
Medium single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat4x4">
Medium single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat4x3">
Medium single-precision floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat4x2">
Medium single-precision floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat3x4">
Medium single-precision floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat3x3">
Medium single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat3x2">
Medium single-precision floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat2x4">
Medium single-precision floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat2x3">
Medium single-precision floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat2x2">
Medium single-precision floating-point 1x1 matrix.
@see gtc_type_precision
Medium single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat4">
Low single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat3">
Low single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat2">
Low single-precision floating-point 1x1 matrix.
@see gtc_type_precision
Low single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat4x4">
Low single-precision floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat4x3">
Low single-precision floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat4x2">
Low single-precision floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat3x4">
Low single-precision floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat3x3">
Low single-precision floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat3x2">
Low single-precision floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat2x4">
Low single-precision floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat2x3">
Low single-precision floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat2x2">
Low single-precision floating-point 1x1 matrix.
@see gtc_type_precision
Low single-precision floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64vec4">
High double-precision floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64vec3">
High double-precision floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64vec2">
High double-precision floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64vec1">
High double-precision floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64vec4">
Medium double-precision floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64vec3">
Medium double-precision floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64vec2">
Medium double-precision floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64vec1">
Medium double-precision floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64vec4">
Low double-precision floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64vec3">
Low double-precision floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64vec2">
Low double-precision floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64vec1">
Low double-precision floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32vec4">
High single-precision floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32vec3">
High single-precision floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32vec2">
High single-precision floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32vec1">
High single-precision floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32vec4">
Medium single-precision floating-point vector of 4 components.
@see core_precision
</member>
        <member name="D:glm.mediump_f32vec3">
Medium single-precision floating-point vector of 3 components.
@see core_precision
</member>
        <member name="D:glm.mediump_f32vec2">
Medium single-precision floating-point vector of 2 components.
@see core_precision
</member>
        <member name="D:glm.mediump_f32vec1">
Medium single-precision floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32vec4">
Low single-precision floating-point vector of 4 components.
@see core_precision
</member>
        <member name="D:glm.lowp_f32vec3">
Low single-precision floating-point vector of 3 components.
@see core_precision
</member>
        <member name="D:glm.lowp_f32vec2">
Low single-precision floating-point vector of 2 components.
@see core_precision
</member>
        <member name="D:glm.lowp_f32vec1">
Low single-precision floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fvec4">
High Single-precision floating-point vector of 4 components.
@see core_precision
</member>
        <member name="D:glm.highp_fvec3">
High Single-precision floating-point vector of 3 components.
@see core_precision
</member>
        <member name="D:glm.highp_fvec2">
High Single-precision floating-point vector of 2 components.
@see core_precision
</member>
        <member name="D:glm.highp_fvec1">
High single-precision floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_vec1">
High single-precision floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fvec4">
Medium Single-precision floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fvec3">
Medium Single-precision floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fvec2">
Medium Single-precision floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fvec1">
Medium single-precision floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_vec1">
Medium single-precision floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fvec4">
Low single-precision floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fvec3">
Low single-precision floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fvec2">
Low single-precision floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fvec1">
Low single-precision floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_vec1">
Low single-precision floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.f64">
Default 64 bit double-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.f32">
Default 32 bit single-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.float64_t">
Default 64 bit double-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.float32_t">
Default 32 bit single-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.float64">
Default 64 bit double-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.float32">
Default 32 bit single-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64">
High 64 bit double-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32">
High 32 bit single-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_float64_t">
High 64 bit double-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_float32_t">
High 32 bit single-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_float64">
High 64 bit double-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_float32">
High 32 bit single-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64">
Medium 64 bit double-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32">
Medium 32 bit single-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_float64_t">
Medium 64 bit double-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_float32_t">
Medium 32 bit single-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_float64">
Medium 64 bit double-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_float32">
Medium 32 bit single-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64">
Low 64 bit double-precision floating-point scalar.
@see gtc_type_precision

Low 64 bit double-precision floating-point scalar.
@see gtc_type_precision

Low 64 bit double-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32">
Low 32 bit single-precision floating-point scalar.
@see gtc_type_precision

Low 32 bit single-precision floating-point scalar.
@see gtc_type_precision

Low 32 bit single-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_float64_t">
Low 64 bit double-precision floating-point scalar.
@see gtc_type_precision

Low 64 bit double-precision floating-point scalar.
@see gtc_type_precision

Low 64 bit double-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_float32_t">
Low 32 bit single-precision floating-point scalar.
@see gtc_type_precision

Low 32 bit single-precision floating-point scalar.
@see gtc_type_precision

Low 32 bit single-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_float64">
Low 64 bit double-precision floating-point scalar.
@see gtc_type_precision

Low 64 bit double-precision floating-point scalar.
@see gtc_type_precision

Low 64 bit double-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_float32">
Low 32 bit single-precision floating-point scalar.
@see gtc_type_precision

Low 32 bit single-precision floating-point scalar.
@see gtc_type_precision

Low 32 bit single-precision floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.u64vec4">
Default precision 64 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u64vec3">
Default precision 64 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u64vec2">
Default precision 64 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u64vec1">
Default precision 64 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64vec4">
High precision 64 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64vec3">
High precision 64 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64vec2">
High precision 64 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64vec1">
High precision 64 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64vec4">
Medium precision 64 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64vec3">
Medium precision 64 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64vec2">
Medium precision 64 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64vec1">
Medium precision 64 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64vec4">
Low precision 64 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64vec3">
Low precision 64 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64vec2">
Low precision 64 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64vec1">
Low precision 64 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.u32vec4">
Default precision 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision

Default precision 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u32vec3">
Default precision 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision

Default precision 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u32vec2">
Default precision 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision

Default precision 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u32vec1">
Default precision 32 bit unsigned integer scalar type.
@see gtc_type_precision

Default precision 32 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32vec4">
High precision 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision

High precision 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32vec3">
High precision 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision

High precision 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32vec2">
High precision 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision

High precision 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32vec1">
High precision 32 bit unsigned integer scalar type.
@see gtc_type_precision

High precision 32 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32vec4">
Medium precision 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision

Medium precision 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32vec3">
Medium precision 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision

Medium precision 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32vec2">
Medium precision 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision

Medium precision 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32vec1">
Medium precision 32 bit unsigned integer scalar type.
@see gtc_type_precision

Medium precision 32 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32vec4">
Low precision 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision

Low precision 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32vec3">
Low precision 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision

Low precision 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32vec2">
Low precision 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision

Low precision 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32vec1">
Low precision 32 bit unsigned integer scalar type.
@see gtc_type_precision

Low precision 32 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.u16vec4">
Default precision 16 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u16vec3">
Default precision 16 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u16vec2">
Default precision 16 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u16vec1">
Default precision 16 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16vec4">
High precision 16 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16vec3">
High precision 16 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16vec2">
High precision 16 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16vec1">
High precision 16 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16vec4">
Medium precision 16 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16vec3">
Medium precision 16 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16vec2">
Medium precision 16 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16vec1">
Medium precision 16 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16vec4">
Low precision 16 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16vec3">
Low precision 16 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16vec2">
Low precision 16 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16vec1">
Low precision 16 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.u8vec4">
Default precision 8 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u8vec3">
Default precision 8 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u8vec2">
Default precision 8 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u8vec1">
Default precision 8 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8vec4">
High precision 8 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8vec3">
High precision 8 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8vec2">
High precision 8 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8vec1">
High precision 8 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8vec4">
Medium precision 8 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8vec3">
Medium precision 8 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8vec2">
Medium precision 8 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8vec1">
Medium precision 8 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8vec4">
Low precision 8 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8vec3">
Low precision 8 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8vec2">
Low precision 8 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8vec1">
Low precision 8 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.u64">
64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.u32">
32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.u16">
16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.u8">
8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.uint64">
64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.uint32">
32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.uint16">
16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.uint8">
8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64">
Medium precision 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32">
Medium precision 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16">
Medium precision 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8">
Medium precision 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint64_t">
Medium precision 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint32_t">
Medium precision 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint16_t">
Medium precision 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint8_t">
Medium precision 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint64">
Medium precision 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint32">
Medium precision 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint16">
Medium precision 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint8">
Medium precision 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64">
Medium precision 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32">
Medium precision 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16">
Medium precision 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8">
Medium precision 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint64_t">
Medium precision 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint32_t">
Medium precision 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint16_t">
Medium precision 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint8_t">
Medium precision 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint64">
Medium precision 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint32">
Medium precision 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint16">
Medium precision 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint8">
Medium precision 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64">
Low precision 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32">
Low precision 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16">
Low precision 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8">
Low precision 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint64_t">
Low precision 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint32_t">
Low precision 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint16_t">
Low precision 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint8_t">
Low precision 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint64">
Low precision 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint32">
Low precision 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint16">
Low precision 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint8">
Low precision 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.i64vec4">
Default precision 64 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i64vec3">
Default precision 64 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i64vec2">
Default precision 64 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i64vec1">
Default precision 64 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64vec4">
High precision 64 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64vec3">
High precision 64 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64vec2">
High precision 64 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64vec1">
High precision 64 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64vec4">
Medium precision 64 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64vec3">
Medium precision 64 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64vec2">
Medium precision 64 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64vec1">
Medium precision 64 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64vec4">
Low precision 64 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64vec3">
Low precision 64 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64vec2">
Low precision 64 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64vec1">
Low precision 64 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.i32vec4">
Default precision 32 bit signed integer vector of 4 components type.
@see gtc_type_precision

Default precision 32 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i32vec3">
Default precision 32 bit signed integer vector of 3 components type.
@see gtc_type_precision

Default precision 32 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i32vec2">
Default precision 32 bit signed integer vector of 2 components type.
@see gtc_type_precision

Default precision 32 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i32vec1">
Default precision 32 bit signed integer scalar type.
@see gtc_type_precision

Default precision 32 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32vec4">
High precision 32 bit signed integer vector of 4 components type.
@see gtc_type_precision

High precision 32 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32vec3">
High precision 32 bit signed integer vector of 3 components type.
@see gtc_type_precision

High precision 32 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32vec2">
High precision 32 bit signed integer vector of 2 components type.
@see gtc_type_precision

High precision 32 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32vec1">
High precision 32 bit signed integer scalar type.
@see gtc_type_precision

High precision 32 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32vec4">
Medium precision 32 bit signed integer vector of 4 components type.
@see gtc_type_precision

Medium precision 32 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32vec3">
Medium precision 32 bit signed integer vector of 3 components type.
@see gtc_type_precision

Medium precision 32 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32vec2">
Medium precision 32 bit signed integer vector of 2 components type.
@see gtc_type_precision

Medium precision 32 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32vec1">
Medium precision 32 bit signed integer scalar type.
@see gtc_type_precision

Medium precision 32 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32vec4">
Low precision 32 bit signed integer vector of 4 components type.
@see gtc_type_precision

Low precision 32 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32vec3">
Low precision 32 bit signed integer vector of 3 components type.
@see gtc_type_precision

Low precision 32 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32vec2">
Low precision 32 bit signed integer vector of 2 components type.
@see gtc_type_precision

Low precision 32 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32vec1">
Low precision 32 bit signed integer scalar type.
@see gtc_type_precision

Low precision 32 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.i16vec4">
Default precision 16 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i16vec3">
Default precision 16 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i16vec2">
Default precision 16 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i16vec1">
Default precision 16 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16vec4">
High precision 16 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16vec3">
High precision 16 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16vec2">
High precision 16 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16vec1">
High precision 16 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16vec4">
Medium precision 16 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16vec3">
Medium precision 16 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16vec2">
Medium precision 16 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16vec1">
Medium precision 16 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16vec4">
Low precision 16 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16vec3">
Low precision 16 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16vec2">
Low precision 16 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16vec1">
Low precision 16 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.i8vec4">
Default precision 8 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i8vec3">
Default precision 8 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i8vec2">
Default precision 8 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i8vec1">
Default precision 8 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8vec4">
High precision 8 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8vec3">
High precision 8 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8vec2">
High precision 8 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8vec1">
High precision 8 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8vec4">
Medium precision 8 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8vec3">
Medium precision 8 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8vec2">
Medium precision 8 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8vec1">
Medium precision 8 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8vec4">
Low precision 8 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8vec3">
Low precision 8 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8vec2">
Low precision 8 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8vec1">
Low precision 8 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.i64">
64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.i32">
32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.i16">
16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.i8">
8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.int64">
64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.int32">
32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.int16">
16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.int8">
8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64">
High precision 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32">
High precision 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16">
High precision 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8">
High precision 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int64_t">
High precision 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int32_t">
32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int16_t">
High precision 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int8_t">
High precision 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int64">
High precision 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int32">
High precision 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int16">
High precision 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int8">
High precision 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64">
Medium precision 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32">
Medium precision 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16">
Medium precision 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8">
Medium precision 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int64_t">
Medium precision 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int32_t">
Medium precision 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int16_t">
Medium precision 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int8_t">
Medium precision 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int64">
Medium precision 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int32">
Medium precision 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int16">
Medium precision 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int8">
Medium precision 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64">
Low precision 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32">
Low precision 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16">
Low precision 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8">
Low precision 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int64_t">
Low precision 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int32_t">
Low precision 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int16_t">
Low precision 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int8_t">
Low precision 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int64">
Low precision 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int32">
Low precision 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int16">
Low precision 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int8">
Low precision 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.dquat">
Quaternion of default double-precision floating-point numbers.

@see gtc_quaternion
</member>
        <member name="D:glm.highp_dquat">
Quaternion of high double-precision floating-point numbers.

@see gtc_quaternion
</member>
        <member name="D:glm.mediump_dquat">
Quaternion of medium double-precision floating-point numbers.

@see gtc_quaternion
</member>
        <member name="D:glm.lowp_dquat">
Quaternion of low double-precision floating-point numbers.

@see gtc_quaternion
</member>
        <member name="D:glm.fquat">
Quaternion of default single-precision floating-point numbers.

@see gtc_quaternion

Default single-precision floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fquat">
Quaternion of high single-precision floating-point numbers.

@see gtc_quaternion
</member>
        <member name="D:glm.mediump_fquat">
Quaternion of medium single-precision floating-point numbers.

@see gtc_quaternion
</member>
        <member name="D:glm.lowp_fquat">
Quaternion of low single-precision floating-point numbers.

@see gtc_quaternion
</member>
        <member name="D:glm.quat">
Quaternion of default single-precision floating-point numbers.
</member>
        <member name="D:glm.highp_quat">
Quaternion of high single-precision floating-point numbers.

@see gtc_quaternion
</member>
        <member name="D:glm.mediump_quat">
Quaternion of medium single-precision floating-point numbers.

@see gtc_quaternion
</member>
        <member name="D:glm.lowp_quat">
Quaternion of low single-precision floating-point numbers.

@see gtc_quaternion
</member>
        <member name="D:glm.dmat4x4">
4 * 4 matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat4x3">
4 * 3 matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat4x2">
4 * 2 matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat3x4">
3 * 4 matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat3x3">
3 * 3 matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat3x2">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat2x4">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat2x3">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat2x2">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat4">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat3">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat2">
@}

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat4x4">
4 columns of 4 components matrix of high precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat4x4">
4 columns of 4 components matrix of medium precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat4x4">
4 columns of 4 components matrix of low precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat4">
4 columns of 4 components matrix of high precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat4">
4 columns of 4 components matrix of medium precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat4">
@}
@addtogroup core_precision
@{
4 columns of 4 components matrix of low precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat4x3">
4 columns of 3 components matrix of high precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat4x3">
4 columns of 3 components matrix of medium precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat4x3">
@}
@addtogroup core_precision
@{
4 columns of 3 components matrix of low precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat4x2">
4 columns of 2 components matrix of high precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat4x2">
4 columns of 2 components matrix of medium precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat4x2">
@}
@addtogroup core_precision
@{
4 columns of 2 components matrix of low precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat3x4">
3 columns of 4 components matrix of high precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat3x4">
3 columns of 4 components matrix of medium precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat3x4">
@}
@addtogroup core_precision
@{
3 columns of 4 components matrix of low precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat3x3">
3 columns of 3 components matrix of high precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat3x3">
3 columns of 3 components matrix of medium precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat3x3">
3 columns of 3 components matrix of low precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat3">
3 columns of 3 components matrix of high precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat3">
3 columns of 3 components matrix of medium precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat3">
@}
@addtogroup core_precision
@{
3 columns of 3 components matrix of low precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat3x2">
3 columns of 2 components matrix of high precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat3x2">
3 columns of 2 components matrix of medium precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat3x2">
@}
@addtogroup core_precision
@{
3 columns of 2 components matrix of low precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat2x4">
2 columns of 4 components matrix of high precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat2x4">
2 columns of 4 components matrix of medium precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat2x4">
@}
@addtogroup core_precision
@{
2 columns of 4 components matrix of low precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat2x3">
2 columns of 3 components matrix of high precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat2x3">
2 columns of 3 components matrix of medium precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat2x3">
@}
@addtogroup core_precision
@{
2 columns of 3 components matrix of low precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat2x2">
2 columns of 2 components matrix of high precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat2x2">
2 columns of 2 components matrix of medium precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat2x2">
2 columns of 2 components matrix of low precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat2">
2 columns of 2 components matrix of high precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat2">
2 columns of 2 components matrix of medium precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat2">
@addtogroup core_precision
@{
2 columns of 2 components matrix of low precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat4">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat3">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat2">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat4x4">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat4x3">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat4x2">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat3x4">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat3x3">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat3x2">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat2x4">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat2x3">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat2x2">
@}
@addtogroup core_types
@{

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat4x4">
4 columns of 4 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
4 columns of 4 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat4x4">
4 columns of 4 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
4 columns of 4 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat4x4">
4 columns of 4 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
4 columns of 4 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat4">
4 columns of 4 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
4 columns of 4 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat4">
4 columns of 4 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
4 columns of 4 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat4">
@}
@addtogroup core_precision
@{
4 columns of 4 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
4 columns of 4 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat4x3">
4 columns of 3 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
4 columns of 3 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat4x3">
4 columns of 3 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
4 columns of 3 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat4x3">
@}
@addtogroup core_precision
@{
4 columns of 3 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
4 columns of 3 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat4x2">
4 columns of 2 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
4 columns of 2 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat4x2">
4 columns of 2 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
4 columns of 2 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat4x2">
@}
@addtogroup core_precision
@{
4 columns of 2 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
4 columns of 2 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat3x4">
3 columns of 4 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
3 columns of 4 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat3x4">
3 columns of 4 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
3 columns of 4 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat3x4">
@}
@addtogroup core_precision
@{
3 columns of 4 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
3 columns of 4 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat3x3">
3 columns of 3 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
3 columns of 3 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat3x3">
3 columns of 3 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
3 columns of 3 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat3x3">
3 columns of 3 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
3 columns of 3 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat3">
3 columns of 3 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
3 columns of 3 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat3">
3 columns of 3 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
3 columns of 3 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat3">
@}
@addtogroup core_precision
@{
3 columns of 3 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
3 columns of 3 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat3x2">
3 columns of 2 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
3 columns of 2 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat3x2">
3 columns of 2 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
3 columns of 2 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat3x2">
@}
@addtogroup core_precision
@{
3 columns of 2 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
3 columns of 2 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat2x4">
2 columns of 4 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
2 columns of 4 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat2x4">
2 columns of 4 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
2 columns of 4 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat2x4">
@}
@addtogroup core_precision
@{
2 columns of 4 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
2 columns of 4 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat2x3">
2 columns of 3 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
2 columns of 3 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat2x3">
2 columns of 3 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
2 columns of 3 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat2x3">
@}
@addtogroup core_precision
@{
2 columns of 3 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
2 columns of 3 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat2x2">
2 columns of 2 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
2 columns of 2 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat2x2">
2 columns of 2 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
2 columns of 2 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat2x2">
2 columns of 2 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
2 columns of 2 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat2">
2 columns of 2 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
2 columns of 2 components matrix of high precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat2">
2 columns of 2 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
2 columns of 2 components matrix of medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat2">
@addtogroup core_precision
@{
2 columns of 2 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
2 columns of 2 components matrix of low precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.bvec4">
4 components vector of boolean.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.bvec3">
3 components vector of boolean.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.bvec2">
2 components vector of boolean.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.uvec4">
4 components vector of unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.uvec3">
3 components vector of unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.uvec2">
2 components vector of unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.ivec4">
4 components vector of signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.ivec3">
3 components vector of signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.ivec2">
2 components vector of signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.dvec4">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.dvec3">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.dvec2">
2 components vector of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.vec4">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.vec3">

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.vec2">
@}
@addtogroup core_types
@{
2 components vector of floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_bvec4">
4 components vector of low precision bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_bvec4">
4 components vector of medium precision bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_bvec4">
4 components vector of high precision bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_uvec4">
4 components vector of low precision unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_uvec4">
4 components vector of medium precision unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_uvec4">
4 components vector of high precision unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_ivec4">
4 components vector of low precision signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_ivec4">
4 components vector of medium precision signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_ivec4">
4 components vector of high precision signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dvec4">
4 components vector of low double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dvec4">
4 components vector of medium double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dvec4">
4 components vector of high double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_vec4">
4 components vector of low single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
Low single-precision floating-point vector of 4 components.
@see core_precision
</member>
        <member name="D:glm.mediump_vec4">
4 components vector of medium single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
Medium Single-precision floating-point vector of 4 components.
@see core_precision
</member>
        <member name="D:glm.highp_vec4">
@}
@addtogroup core_precision
@{
4 components vector of high single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
High Single-precision floating-point vector of 4 components.
@see core_precision
</member>
        <member name="D:glm.lowp_bvec3">
3 components vector of low precision bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_bvec3">
3 components vector of medium precision bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_bvec3">
3 components vector of high precision bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_uvec3">
3 components vector of low precision unsigned integer numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_uvec3">
3 components vector of medium precision unsigned integer numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_uvec3">
3 components vector of high precision unsigned integer numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_ivec3">
3 components vector of low precision signed integer numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_ivec3">
3 components vector of medium precision signed integer numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_ivec3">
3 components vector of high precision signed integer numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dvec3">
3 components vector of low double-precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dvec3">
3 components vector of medium double-precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dvec3">
3 components vector of high double-precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_vec3">
3 components vector of low single-precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
Low single-precision floating-point vector of 3 components.
@see core_precision
</member>
        <member name="D:glm.mediump_vec3">
3 components vector of medium single-precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
Medium Single-precision floating-point vector of 3 components.
@see core_precision
</member>
        <member name="D:glm.highp_vec3">
@}
@addtogroup core_precision
@{
3 components vector of high single-precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
High Single-precision floating-point vector of 3 components.
@see core_precision
</member>
        <member name="D:glm.lowp_bvec2">
2 components vector of low precision bool numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_bvec2">
2 components vector of medium precision bool numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_bvec2">
2 components vector of high precision bool numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_uvec2">
2 components vector of low precision unsigned integer numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_uvec2">
2 components vector of medium precision unsigned integer numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_uvec2">
2 components vector of high precision unsigned integer numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_ivec2">
2 components vector of low precision signed integer numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_ivec2">
2 components vector of medium precision signed integer numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_ivec2">
2 components vector of high precision signed integer numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dvec2">
2 components vector of low double-precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dvec2">
2 components vector of medium double-precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dvec2">
2 components vector of high double-precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_vec2">
2 components vector of low single-precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
Low single-precision floating-point vector of 2 components.
@see core_precision
</member>
        <member name="D:glm.mediump_vec2">
2 components vector of medium single-precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
Medium Single-precision floating-point vector of 2 components.
@see core_precision
</member>
        <member name="D:glm.highp_vec2">
@addtogroup core_precision
@{
2 components vector of high single-precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a>
High Single-precision floating-point vector of 2 components.
@see core_precision
</member>
        <member name="D:glm.highp_float">
High precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.4 Floats</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_float">
Medium precision floating-point numbers.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.4 Floats</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_float">
@addtogroup core_precision
@{
Low precision floating-point numbers. 
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.4 Floats</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.uint">
Unsigned integer type.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.3 Integers</a></member>
        <member name="D:glm.highp_uint">
High precision unsigned integer. 
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.3 Integers</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_uint">
Medium precision unsigned integer. 
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.3 Integers</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_uint">
Low precision unsigned integer. 
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.3 Integers</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_int">
High precision signed integer.
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.3 Integers</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_int">
Medium precision signed integer. 
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.3 Integers</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_int">
@addtogroup core_precision
@{
Low precision signed integer. 
There is no guarantee on the actual precision.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.3 Integers</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="T:__m64">
@ref simd
@file glm/simd/platform.h
</member>
        <member name="M:_wassert(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
@ref core
@file glm/fwd.hpp
@ref core
@file glm/detail/type_int.hpp
@ref core
@file glm/detail/setup.hpp

C++ Camera.h
Purpose: Header of Camera class

@author Alejandro Molina Quesada
@version 1.0
@date 03/03/2018

@ref core
@file glm/detail/_fixes.hpp

@file metadata.h
 *  @brief Defines the data structures for holding node meta information.

</member>
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiComponent'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiFace'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiAnimMesh.HasVertexColors(System.UInt32)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiAnimMesh.HasTextureCoords(System.UInt32)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiLight'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiCamera'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiTextureOp'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiTextureType'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiShadingMode'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiBlendMode'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiMaterialProperty'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiGetMaterialFloatArray(aiMaterial!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,System.Single*,System.UInt32*)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiGetMaterialFloat(aiMaterial!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,System.Single*)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiComponent'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiFace'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiAnimMesh.HasVertexColors(System.UInt32)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiAnimMesh.HasTextureCoords(System.UInt32)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiLight'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiCamera'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiTextureOp'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiTextureType'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiShadingMode'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiBlendMode'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiMaterialProperty'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiGetMaterialFloatArray(aiMaterial!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,System.Single*,System.UInt32*)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiGetMaterialFloat(aiMaterial!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,System.Single*)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiComponent'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiFace'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiAnimMesh.HasVertexColors(System.UInt32)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiAnimMesh.HasTextureCoords(System.UInt32)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiLight'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiCamera'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiTextureOp'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiTextureType'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiShadingMode'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiBlendMode'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiMaterialProperty'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiGetMaterialFloatArray(aiMaterial!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,System.Single*,System.UInt32*)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiGetMaterialFloat(aiMaterial!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,System.Single*)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiComponent'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiFace'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiAnimMesh.HasVertexColors(System.UInt32)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiAnimMesh.HasTextureCoords(System.UInt32)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiLight'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiCamera'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiTextureOp'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiTextureType'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiShadingMode'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiBlendMode'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'T:aiMaterialProperty'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiGetMaterialFloatArray(aiMaterial!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,System.Single*,System.UInt32*)'. -->
        <!-- Descartando el comentario del documento XML de formato incorrecto para el miembro 'M:aiGetMaterialFloat(aiMaterial!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,System.Single*)'. -->
    </members>
</doc>